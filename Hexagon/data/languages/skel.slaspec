# sleigh specification file for Skeleton Processor
#   >> see docs/languages/sleigh.htm or sleigh.pdf for Sleigh syntax
# Other language modules (see Ghidra/Processors) may provide better examples
# when creating a new language module.


# List of nice-to-haves in SELIGH
# arbitary bit-count sext, not just bytes
# allow sext and s>> in [] bit of constructor
# allow (a+b, a) in tokens, keep getting imm64s wrong 
# Allow setting size of local in constructor

#Status:
# Most scalar ops are done, most vec ops are missing

# ALU32:  Decode up to v73, pcode unfinished
# CR:     Decode up to v73, pcode unfinished
# JR:     Decode up to v73, pcode unfinished
# J:      Decode up to v73, pcode unfinished
# LD:     Decode up to v51, pcode unfinished << wip
# MEMOP:  Decode up to v73, pcode unfinished
# NV:     Decode up to v73, pcode unfinished
# ST:     Decode up to v73, pcode unfinished
# SYSTEM: Decode up to v73, pcode unfinished
# XTYPE:  Decode up to <uncheck>, pcode unfinished << wip
# XTYPE/ALU:  Decode up to v51, pcode unfinished
# XTYPE/BIT:  Decode up to v51, pcode unfinished
# XTYPE/COMPLEX:  Decode up to none, pcode unfinished
# XTYPE/FP:  Decode up to none, pcode unfinished


#TODO:
# check ext values, they are wrong

define endian=little;
define alignment=4;

define space ram     type=ram_space      size=4 wordsize=1 default;
define space register type=register_space size=4;

define token instr64 (64)
    # imm64 = second word
    # immw = first word
   uimmw_hi = (16, 27)
   uimmw_lo = (0, 13)

   immw_hi = (16, 27) signed
   immw_lo = (0, 13) signed

   parsew = (14, 15)
   parse64 = (46, 47)
   iclass64     = (60,63)
   
   imm64_27 = (59, 59)

   imm64_25_27 = (57, 59) signed
   imm64_25_26 = (57, 58) signed

   imm64_22_23 = (54, 55) signed
   
	imm64_21_27 = (53, 59)
   imm64_21_24 = (53, 56)
   imm64_21 = (53, 53)

	imm64_16_27 = (48, 59)
   imm64_16_20 = (48, 52) signed
   
   imm64_13 = (45, 45)

   imm64_5_13 = (37, 45) signed
   imm64_5_6 = (37, 38) signed
   imm64_7_12 = (39, 44) signed
   uimm64_7_12 = (39, 44)
   imm64_0 = (32, 32) signed

   Rs64 = (59, 59)
   MajOp64 = (56,58)

   S564 = (48,52)
   D564 = (32,36)

   iclassw = (28, 31)
;

#define token instr13 (16)
#
#	immdup_13=(13,13)
#	immdup_9_12=(9,12)
#	immdup_5_8=(5,8)
#	immdup_0_9=(0,9)
#	immdup_0_4=(0,4)
#	;

define token instr (32)
   iclass     = (28,31)

   imm_29_31 = (29, 31)


   imm_27 = (27, 27)
      imm_26 = (26, 26)
 

   imm_25_27 = (25, 27)
   imm_25_26 = (25, 26) signed

   imm_24_27 = (24, 27)

   imm_23_27 = (23, 27)
   imm_23_24 = (23, 24)
   imm_23 = (23, 23)

imm_22_26 = (22, 26)
   imm_22_27 = (22, 27)
   imm_22_23 = (22, 23) signed
   imm_22 = (22, 22)

   imm_21_27 = (21, 27) signed
   imm_21_24 = (21, 24)
   imm_21_23 = (21, 23)
   imm_21_22 = (21, 22)
   imm_21 = (21, 21) signed

   imm_20_27 = (20, 27)
   imm_20_21 = (20, 21)
   imm_20 = (20, 20) signed

   imm_19 = (19, 19) signed

   imm_18_21 = (18, 21)
   imm_18_20 = (18, 20)
   imm_18_19 = (18, 19)
   
      imm_17_27 = (17,27)
   

   imm_16_27 = (16, 27)
   imm_16_25 = (16, 25) signed
   imm_16_24 = (16, 24) signed
   imm_16_24u = (16, 24)
   imm_16_23 = (16, 23)
   imm_16_22 = (16, 22)
   imm_16_21 = (16, 21)
   imm_16_20 = (16, 20)
   imm_16_20u = (16, 20)
   imm_16_19 = (16, 19)
   imm_16_18 = (16, 18)
   imm_16_17 = (16, 17)

   imm_13 = (13, 13) signed
   imm_13u = (13, 13)

   imm_12_13 = (12, 13)
   imm_12 = (12, 12)

   imm_11_13 = (11, 13) signed
   imm_11_12 = (11, 12)
   imm_11 = (11, 11)

   imm_10_13 = (10, 13)
   imm_10_12 = (10, 12)
      imm_10_11 = (10, 11)
   imm_10 = (10, 10)
   
   imm_9_13 = (9, 13)
   imm_9_11 = (9, 11)
   imm_9_10 = (9, 10)
      imm_9 = (9, 9)

   imm_8_13 = (8, 13)
   imm_8_12 = (8, 12)
      imm_8_11 = (8, 11)
      imm_8_10 = (8, 10)
      imm_8_9 = (8, 9)
   
   imm_8 = (8, 8)

   imm_7_13 = (7, 13)
   imm_7_12 = (7, 12)
   imm_7 = (7, 7)

   imm_6_7 = (6, 7)
   imm_6_13 = (6, 13)
   imm_6 = (6, 6)

   imm_5_13 = (5, 13) signed
   imm_5_12 = (5, 12)
      imm_5_11 = (5, 11)
   imm_5_10 = (5, 10)
   imm_5_9 = (5, 9)
   imm_5_8 = (5, 8)
   imm_5_7 = (5, 7)
   imm_5_6 = (5, 6)
   imm_5 = (5, 5)

   imm_4 = (4, 4)

   imm_3_12 = (3, 12)
   imm_3_7 = (3, 7)
   imm_3_6 = (3, 6)
   imm_3_4 = (3, 4)
   imm_3 = (3, 3)

   imm_2_13 = (2, 13)
   imm_2_12 = (2, 12)
   imm_2_7 = (2, 7)
   imm_2_6 = (2, 6)
   imm_2_5 = (2, 5)
   imm_2_4 = (2, 4)
   imm_2_3 = (2, 3)
   imm_2 = (2, 2)

   imm_1_13 = (1, 13) signed
   imm_1_13u = (1, 13)
   imm_1_11 = (1, 11) signed
   imm_1_7 = (1, 7)
   imm_1_7u = (1, 7)
   imm_1_2 = (1, 2)
   imm_1 = (1, 1)

   imm_0_13 = (0, 13)
  imm_0_12 = (0, 12)
   imm_0_10 = (0, 10)
   imm_0_9 = (0, 9)
   imm_0_7 = (0, 7) signed
   imm_0_6 = (0, 6)
   imm_0_5 = (0, 5)
   imm_0_4 = (0, 4)
   imm_0_2 = (0, 2)
   imm_0_1 = (0, 1)
   imm_0 = (0, 0)
   

   D4_16_19 = (16,19)
   D4_8_11 = (8,11)
   S4 = (16,19)
   S2 = (16,17)
   T2 = (8,9)
   D2 = (0,1)

   S2_pred = (16,17)
   T2_pred = (8,9)
   D2_pred = (0,1)
   D2_pred_new = (0,1)
   U2_pred = (8,9)
   U1_23_24_pred = (23,24)
   U2_5_6 = (5,6)
   T2_11_12_pred = (11,12)
   T2_9_10_pred = (9,10)

   T5 = (8,12)
   T5_pair = (9,12)
   
   
   Rs = (27, 27)
   MajOp = (24,26)
   MinOp = (21,23)
   D7 = (0,7)
   D7_svctrl = (0,7)

   D5_pair = (1,4)
   D5 = (0,4)
   D5_ctrl = (0,4)

   S7 = (16,22)
   S7_svctrl = (16,22)

   S5 = (16,20)
   S5_pair = (17,20)
   S5_ctrl = (16,20)
   alu_X5 = (16,20)
   alu_X5_pair = (17,20)

   U2 = (8,9)
   U2_pred_new = (8,9)

   T3_0_2 = (0,2)

   
   parse = (14, 15)
  	imm32 = (0, 31)
  	
  	
	immdup0_10_12=(10,12)
 	immdup0_13=(13,13)
	immdup0_9_12=(9,12)
	immdup0_5_8=(5,8)
	immdup0_4_9=(20,25)
	immdup0_0_9=(0,9)
	immdup0_0_4=(0,4)
	immdup0_0_3=(0,3)
	immdup0_D4=(0,3)
	
	immdup1_10_12=(26,28)
	immdup1_13=(29,29)
	immdup1_9_12=(25,28)
	immdup1_5_8=(21,24)
	immdup1_4_9=(20,25)
	immdup1_0_9=(16,25)
	immdup1_0_4=(16,20)
	immdup1_0_3=(16,19)
	immdup1_D4=(16,19)
;
# high dword: Left
# lo   dword: Right
define register offset=0x00 size=8 [ 
X1X0 
X3X2 
X5X4 
X7X6 
X9X8 
X11X10 
X13X12 
X15X14 
X17X16 
X19X18 
X21X20 
X23X22 
X25X24 
X27X26 
SPX28
LRFP
];

attach variables [ D5_pair T5_pair S5_pair alu_X5_pair ] [
X1X0 
X3X2 
X5X4 
X7X6 
X9X8 
X11X10 
X13X12 
X15X14 
X17X16 
X19X18 
X21X20 
X23X22 
X25X24 
X27X26 
SPX28
LRFP
];

define register offset=0x00 size=4 [ 
X0 
X1 
X2 
X3 
X4 
X5 
X6 
X7 
X8 
X9 
X10 
X11 
X12 
X13 
X14 
X15 
X16 
X17 
X18 
X19 
X20 
X21 
X22 
X23 
X24 
X25 
X26 
X27 
X28 
SP
FP
LR
 ];

attach variables [ D5 D564 S5 S564 alu_X5 T5 ] [
X0 
X1 
X2 
X3 
X4 
X5 
X6 
X7 
X8 
X9 
X10 
X11 
X12 
X13 
X14 
X15 
X16 
X17 
X18 
X19 
X20 
X21 
X22 
X23 
X24 
X25 
X26 
X27 
X28 
SP
FP
LR
];

attach variables [ S4 D4_16_19 D4_8_11 ] [
X0 
X1 
X2 
X3 
X4 
X5 
X6 
X7 
X16 
X17 
X18 
X19 
X20 
X21 
X22 
X23 
];

attach variables [ immdup0_D4 immdup1_D4 ] [
X0
X1
X2
X3
X4
X5
X6
X7
X16
X17
X18
X19
X20
X21
X22
X23
];

 define register offset=0x80 size=4 [ 
SA0
LC0
SA1
LC1
P30
Reserve_5
M0
M1
USR
PC
UGP
GP
CS0
CS1
UPCYCLELO
UPCYCLEHI

Reserved_16
Reserved_17
Reserved_18
Reserved_19
Reserved_20
Reserved_21
Reserved_22
Reserved_23
Reserved_24
Reserved_25
Reserved_26
Reserved_27
Reserved_28
Reserved_29
Reserved_30
Reserved_31
 ];

 
 attach variables [ D5_ctrl S5_ctrl ] [
 SA0
LC0
SA1
LC1
P30
Reserve_5
M0
M1
USR
PC
UGP
GP
CS0
CS1
UPCYCLELO
UPCYCLEHI

Reserved_16
Reserved_17
Reserved_18
Reserved_19
Reserved_20
Reserved_21
Reserved_22
Reserved_23
Reserved_24
Reserved_25
Reserved_26
Reserved_27
Reserved_28
Reserved_29
Reserved_30
Reserved_31
];

define register offset=0x100 size=4 [ 
P0
P1
P2
P3
];

attach variables [ U2 D2_pred T2_pred S2_pred U2_pred U2_5_6 U1_23_24_pred T2_11_12_pred T2_9_10_pred ] [
P0
P1
P2
P3
];

define register offset=0x200 size=4 [ 
branch_tgt
call_tgt
P0.new
P1.new
P2.new
P3.new
];


attach variables [ D2_pred_new U2_pred_new ] [
P0.new
P1.new
P2.new
P3.new
];




 define pcodeop _stub;

 
# ALU32/ALU:add
slot:D5" = add("S5",#"loc")" is iclass=0b1011 & S5 & D5 & imm_21_27 & imm_5_13 [loc= ((imm_21_27 << 9) | (imm_5_13));] {
    D5 = S5 + sext(loc:2);
} 
slot:D5" = add("S5","T5")" is iclass=0b1111 & D5 & imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0 {
    D5 = S5 + T5;
} 
slot:D5" = add("S5","T5"):sat" is iclass=0b1111 & D5 & imm_21_27=0b0110010 & S5 & imm_13=0 & T5 & imm_5_7=0 {
    #D5 = S5 + T5;
    _stub();
}
# const ext 
wslot:"w add" is iclass64=0b1011 & S564 & D564 & imm64_21_27 & imm64_5_13
{
_stub();
}

# ALU32/ALU:logical
with slot: iclass=0b0111 {
	:D5 = "and"(S5",#"s10) is Rs=0 & MajOp = 0b110 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13 & D5 [ s10 = (imm_21 << 9) | imm_5_13;] {
		D5 = S5 & s10;
	} 

	:D5 = "or"(S5",#"s10) is Rs=0 & MajOp = 0b110 & imm_22_23=0b10 & imm_21 & S5 & imm_5_13 & D5 [ s10 = (imm_21 << 9) | imm_5_13;] {
		D5 = S5 & s10;
	} 
}
with slot: iclass=0b1111 {
	:D5 = "and("S5","T5")" is imm_21_27=0b0001000 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = S5 & T5;
	} 

	:D5 = "or("S5","T5")" is imm_21_27=0b0001001 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = S5 | T5;
	} 

	:D5 = "xor("S5","T5")" is imm_21_27=0b0001011 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = S5 ^ T5;
	} 

	:D5 = "and("T5",~"S5")" is imm_21_27=0b0001100 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = T5 & (~S5);
	} 

	:D5 = "or("T5",~"S5")" is imm_21_27=0b0001101 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		D5 = T5 | (~S5);
	} 
}
# ALU32/ALU:negate
# TODO

# ALU32/ALU:nop
with slot: iclass=0b0111 {
	:"nop" is imm_24_27=0b1111 & imm_16_23  & imm_0_13 {}
}

# ALU32/ALU:subtract
with slot: iclass=0b0111 {
	slot:" = sub()" is imm_22_27=0b011001 & imm_21 & S5 & imm_5_13 & D5 {
		_stub();
	} 
}
with slot: iclass=0b1111 {
	slot:D5" = sub("T5","S5")" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
	    D5 = T5 - S5;
	} 

	slot:D5" = sub("T5","S5"):sat" is imm_21_27=0b0110110 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		_stub();
	    #D5 = T5 - S5;
	} 
}


# ALU32/ALU:sext
with slot: iclass=0b0111 {
	slot:D5" = sxtb("S5")" is imm_21_27=0b0000101 & S5 & imm_13=0 & imm_5_12=0 & D5 {
	_stub();
	} 
	slot:D5" = sxth("S5")" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_5_12=0 & D5 {
	_stub();
	} 
}

# ALU32/ALU:trans_imm
 with slot: iclass=0b0111 {
  	
	ImmU16: v is    imm_22_23 & imm_0_13  [ v = (imm_22_23 << 14) | (imm_0_13); ] {
		local v1:4 = v;
	 	export v1;
	  }
	  
  	TI_S16: v is    imm_22_23 & imm_16_20 & imm_5_13  [ v = (imm_5_13) | (imm_16_20 << 9) | (imm_22_23 << 14); ] {
		local v1:4 = v;
	 	export v1;
	  }
	  
 
	:alu_X5^".L" = ImmU16 is Rs = 0 & MajOp = 0b001 & imm_21=1 & alu_X5 & ImmU16 {
		local tmp:4 = alu_X5 & 0xFFFF0000;
		alu_X5 = tmp | ImmU16;
	}
	
	:alu_X5^".H" = ImmU16 is Rs = 0 & MajOp = 0b010 & imm_21=1 & alu_X5 & ImmU16 {
		local tmp:4 = alu_X5 & 0x0000FFFF;
		alu_X5 = tmp | (ImmU16 << 16);
	}
	
	:D5=TI_S16 is  Rs = 1 & MajOp=0b000 & imm_21=0 & TI_S16 & D5 {
		D5 = TI_S16;
	}  
}
# Special case for constant extender
wslot:"immext #"v" "D564"=#"v1 is immw_hi & immw_lo & iclass64=0b0111 & Rs64=1 & MajOp64=0b000 & imm64_21=0 &  D564 & imm64_22_23 & imm64_16_20 & imm64_5_13 [ v = (imm64_5_13) | (imm64_16_20 << 9) | (imm64_22_23 << 14) | (immw_lo << 6) | (immw_hi << 19); v1=v;]
{
    D564 = v:4;
}

# externder placeholder
wslot:"immextplace" is immw_hi & immw_lo & iclass64 & Rs64 & MajOp64 & imm64_21 &  D564 & imm64_22_23 & imm64_16_20 & imm64_5_13 
{
	_stub();
}


# ALU32/ALU:trans_reg
 with slot: iclass=0b0111 {
	:D5"="S5 is Rs = 0 & MajOp = 0b000 & MinOp=0b011 & S5 & imm_13=0 & imm_5_12=0 & D5 {
        D5 = S5;
	}
}


# ALU32/ALU:vector add hw
with slot: iclass=0b1111 {
    :D5="vaddh(" is imm_21_27=0b0110000 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="vaddhsat(" is imm_21_27=0b0110001 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="vadduh(" is imm_21_27=0b0110011 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/ALU:vector avg hw
with slot: iclass=0b1111 {
    :D5="vavgh(" is imm_24_27=0b0111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="vavghrnd(" is imm_24_27=0b0111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="vnavgh(" is imm_24_27=0b0111 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/ALU:vector sub hw
with slot: iclass=0b1111 {
    :D5="vsubh(" is imm_21_27=0b0110100 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="vsubhsat(" is imm_21_27=0b0110101 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="vsubuh(" is imm_21_27=0b0110111 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/ALU:zext
 with slot: iclass=0b0111 {
	:D5"="S5 is imm_21_27=0b0000110 & S5 & imm_13=0 & imm_5_12=0 & D5 {
	_stub();
	}
}

# ALU32/PERM:Combine words
with slot: iclass=0b0111 {
    :D5="comb0(" is Rs=0 & MajOp=0b011 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
    :D5="comb1(" is Rs=0 & MajOp=0b011 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
    :D5_pair"=combine(#"imm_5_12",#"S8")" is Rs=1 & MajOp=0b100 & imm_23=0 & imm_16_22 & imm_13 & imm_5_12 & D5_pair [S8 = imm_13 | (imm_16_22<<1);] {
        local tmp:4 = S8;
        local tmp1:8 = zext(tmp);
        local tmp2:4 = imm_5_12;
        local tmp3:8 = zext(tmp2);
        D5_pair = (tmp1<<32)|tmp3;
    }
    :D5="comb3(" is Rs=1 & MajOp=0b100 & imm_23=1 & imm_21_22=0 & imm_16_20 & imm_13 & imm_5_12 & D5 {
        _stub();
    }
}
with slot: iclass=0b1111 {
    :D5="comb4(" is Rs=0 & MajOp=0b011 & MinOp=0b100 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="comb5(" is Rs=0 & MajOp=0b011 & MinOp=0b101 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="comb6(" is Rs=0 & MajOp=0b011 & MinOp=0b110 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="comb7(" is Rs=0 & MajOp=0b011 & MinOp=0b111 & S5 & imm_13 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5_pair"=combine("S5","T5")" is Rs=0 & MajOp=0b101 & imm_23=0 & imm_21_22=0 & S5 & imm_13 & T5 & imm_5_7=0 & D5_pair {
        local tmp:8 = zext(S5);
        D5_pair = (tmp<<32)|(zext(T5));
    }
}

# ALU32/PERM:Mux
with slot: iclass=0b0111 {
    :D5="mux0(" is Rs=0 & MajOp=0b011 & imm_23=0 & imm_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
        _stub();
    }
    :D5="mux1(" is Rs=0 & MajOp=0b011 & imm_23=1 & imm_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
        _stub();
    }
    :D5"=mux("U1_23_24_pred",#"imm_5_12",#"S8")" is Rs=1 & imm_25_26=0b01 & U1_23_24_pred & imm_16_22 & imm_13 & imm_5_12 & D5 [ S8 = imm_13 | (imm_16_22 << 1);]{
        if(U1_23_24_pred != 0) goto <good>;
        D5 = S8;
        goto inst_next;
        <good>
        D5 = imm_5_12;
        goto inst_next;
    }
}
with slot: iclass=0b1111 {
    :D5"=mux("U2_5_6","S5",#"T5")" is Rs=0 & MajOp=0b100 & imm_21_23 & S5 & imm_13=0 & T5 & imm_7=0 & U2_5_6 & D5 {
        if(U2_5_6 != 0) goto <good>;
        D5 = T5;
        goto inst_next;
        <good>
        D5 = S5;
        goto inst_next;
    }
}

# ALU32/PERM:Shift word 16
with slot: iclass=0b0111 {
    :D5="aslh(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=0 & imm_5_12=0 & D5 {
        _stub();
    }
    :D5="asrh(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=0 & imm_5_12=0 & D5 {
        _stub();
    }
}

# ALU32/PERM:Pack hi and lo hw
with slot: iclass=0b1111 {
    :D5="packhl(" is Rs=0 & MajOp=0b101 & imm_23=1 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/PRED:Compare add
with slot: iclass=0b0111 {
    :D5="cadd0(" is Rs=0 & MajOp=0b100 & imm_23=0 & imm_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
        _stub();
    }
    :D5="cadd1(" is Rs=0 & MajOp=0b100 & imm_23=0 & imm_21_22 & S5 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
    :D5="cadd2(" is Rs=0 & MajOp=0b100 & imm_23=1 & imm_21_22 & S5 & imm_13=0 & imm_5_12 & D5 {
        _stub();
    }
    :D5="cadd3(" is Rs=0 & MajOp=0b100 & imm_23=1 & imm_21_22 & S5 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
}
with slot: iclass=0b1111 {
    :D5="cadd4(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="cadd5(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
    :D5="cadd6(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=1 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    } 
    :D5="cadd7(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_21=0 & imm_21=0 & S5 & imm_13=1 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    } 
}
# ALU32/PRED:Cond shift hw
with slot: iclass=0b0111 {
    :D5="cshw0(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw1(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw2(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw3(" is Rs=0 & MajOp=0b000 & MinOp=0b000 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }

    :D5="cshw4(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw5(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw6(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cshw7(" is Rs=0 & MajOp=0b000 & MinOp=0b001 & S5 & imm_13=1 & imm_0_12 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/PRED:Cond comb
with slot: iclass=0b1111 {
    :D5="ccmb0(" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="ccmb1(" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
    :D5="ccmb2(" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=1 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="ccmb3(" is Rs=1 & MajOp=0b101 & MinOp=0b000 & S5 & imm_13=1 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
}
# ALU32/PRED:Cond logical
with slot: iclass=0b1111 {
    :D5="clo0("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo1("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo2("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=1 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo3("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=1 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }

    :D5="clo4("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo5("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo6("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=1 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo7("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=1 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }

    :D5="clo8("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo9("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo10("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=1 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="clo11("S5")" is Rs=1 & MajOp=0b001 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=1 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
}
# ALU32/PRED:Cond sub
with slot: iclass=0b1111 {
    :D5="csub0(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="csub1(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
    :D5="csub2(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=1 & T5 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :D5="csub3(" is Rs=1 & MajOp=0b011 & imm_23=0 & imm_22=0 & imm_21=1 & S5 & imm_13=1 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
}

# ALU32/PRED:sext
with slot: iclass=0b0111 {
    :D5="csext0(" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="csext1(" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="csext2(" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="csext3(" is imm_21_27=0b0000101 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }

    :D5="csext4(" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="csext5(" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="csext6(" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="csext7(" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/PRED:trans
with slot: iclass=0b0111 {
    :D5="ctrans0(" is imm_23_27=0b11100 & imm_21_22 & imm_20=0 & imm_16_19 & imm_13=0 & imm_5_12 & D5 {
        _stub();
    }
    :D5="ctrans1(" is imm_23_27=0b11100 & imm_21_22 & imm_20=0 & imm_16_19 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
    :D5="ctrans3(" is imm_23_27=0b11101 & imm_21_22 & imm_20=0 & imm_16_19 & imm_13=0 & imm_5_12 & D5 {
        _stub();
    }
    :D5="ctrans4(" is imm_23_27=0b11101 & imm_21_22 & imm_20=0 & imm_16_19 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
}

# ALU32/PRED:zext
with slot: iclass=0b0111 {
    :D5="czext0(" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="czext1(" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="czext2(" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="czext3(" is imm_21_27=0b0000100 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }

    :D5="czext4(" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b00 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="czext5(" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b01 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="czext6(" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b10 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="czext7(" is imm_21_27=0b0000110 & S5 & imm_13=1 & imm_12=0 & imm_10_11=0b11 & imm_8_9 & imm_5_7=0 & D5 {
        _stub();
    }
}

# ALU32/PRED:cmp
 with slot: iclass=0b0111 {
    # Compare
	:D2_pred_new="cmp.eq("S5", "s10")" is Rs = 0 & MajOp=0b101 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13 & imm_2_4=0b000 & D2_pred_new [s10 = imm_5_13 | (imm_21 << 9);] {
        if( S5 == s10) goto <good>;
        D2_pred_new = -1;
        goto inst_next;
        <good>
        D2_pred_new = 0;
        goto inst_next;
	}  
	:D2_pred="!cmp.eq("S5", "s10")"is Rs = 0 & MajOp=0b101 & imm_22_23=0b00 & imm_21 & S5 & imm_5_13 & imm_2_4=0b100 & D2_pred [s10 = imm_5_13 | (imm_21 << 9);]{
        if( S5 != s10) goto <good>;
        D2_pred = -1;
        goto inst_next;
        <good>
        D2_pred = 0;
        goto inst_next;
	}  
	:D2_pred="cmp.gt("S5", "s10")" is Rs = 0 & MajOp=0b101 & imm_22_23=0b01 & imm_21 & S5 & imm_5_13 & imm_2_4=0b000 & D2_pred [s10 = imm_5_13 | (imm_21 << 9);]{
        if( S5 s> s10) goto <good>;
        D2_pred = -1;
        goto inst_next;
        <good>
        D2_pred = 0;
        goto inst_next;
	}  
	:D2_pred="!cmp.gt("S5", "s10")" is Rs = 0 & MajOp=0b101 & imm_22_23=0b01 & imm_21 & S5 & imm_5_13 & imm_2_4=0b100 & D2_pred [s10 = imm_5_13 | (imm_21 << 9);]{
        if( S5 s<= s10) goto <good>;
        D2_pred = -1;
        goto inst_next;
        <good>
        D2_pred = 0;
        goto inst_next;
	}  
	:D2_pred_new"=cmp.gtu("S5", "imm_5_13")" is Rs = 0 & MajOp=0b101 & imm_21_23=0b100 & S5 & imm_5_13 & imm_2_4=0b000 & D2_pred_new {
        if( S5 > imm_5_13) goto <good>;
        D2_pred_new = -1;
        goto inst_next;
        <good>
        D2_pred_new = 0;
        goto inst_next;
	}  
	:D2_pred="cmp.gtu("S5", "imm_5_13")" is Rs = 0 & MajOp=0b101 & imm_21_23=0b100 & S5 & imm_5_13 & imm_2_4=0b100 & D2_pred {
        if( S5 <= imm_5_13) goto <good>;
        D2_pred = -1;
        goto inst_next;
        <good>
        D2_pred = 0;
        goto inst_next;
	}  
}
with slot: iclass=0b1111 {

	:D2_pred="=cmp.eq("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b000 & D2_pred {
        if( S5 == T5) goto <good>;
        D2_pred = -1;
        goto inst_next;
        <good>
        D2_pred = 0;
        goto inst_next;
	}  
	:D2_pred="cmp7" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b100 & D2_pred {
    _stub();
	}  
	:D2_pred="cmp8" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b000 & D2_pred {
    _stub();
	}  
	:D2_pred="cmp9" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b100 & D2_pred {
    _stub();
	}  
	:D2_pred="cmp10" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b000 & D2_pred {
    _stub();
	}  
#TODO: check this pcode
	:D2_pred="=cmp.gtu("S5","T5")" is Rs = 0 & MajOp=0b010 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0 & imm_2_4=0b100 & D2_pred {
        if( S5 <= T5) goto <good>;
        D2_pred = -1;
        goto inst_next;
        <good>
        D2_pred = 0;
        goto inst_next;
	}  

}

# ALU32/PRED:cmp gen
with slot: iclass=0b0111 {
    :D5="cgen0(" is imm_24_27=0b0011 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
    :D5="cgen1(" is imm_24_27=0b0011 & imm_23=0 & imm_21_22=0b11 & S5 & imm_13=1 & imm_5_12 & D5 {
        _stub();
    }
}
with slot: iclass=0b1111 {
    :D5="cgen2(" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
    :D5="cgen3(" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
        _stub();
    }
}

# CR:end loop - not actually any ops
# CR: Corner detection
with slot: iclass=0b0110 {
    :"fastcorner9" is imm_20_27=0b10110000 & imm_18_19=0b00 & S2 & imm_13=1 & imm_10_12=0b000 & T2 & imm_7=1 & imm_5_6=0b00 & imm_4=1 & imm_2_3=0b00 & D2 {
        _stub();
    }
    :"!fastcorner9" is imm_20_27=0b10110001 & imm_18_19=0b00 & S2 & imm_13=1 & imm_10_12=0b000 & T2 & imm_7=1 & imm_5_6=0b00 & imm_4=1 & imm_2_3=0b00 & D2 {
        _stub();
    }
}
# CR: Logical reduction
with slot: iclass=0b0110 {
    :"all8" is imm_20_27=0b10111000 & imm_18_19=0b00 & S2 & imm_13=0 & imm_2_12=0 & D2 {
        _stub();
    }
    :"any8" is imm_20_27=0b10111010 & imm_18_19=0b00 & S2 & imm_13=0 & imm_2_12=0 & D2 {
        _stub();
    }
}

# CR: Looops
#TODO: need analyser for these
with slot: iclass=0b0110 {
    :"loop0" is imm_21_27=0b0000000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4 & imm_0_2=0 {
    }
    :"loop1" is imm_21_27=0b0000001 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4 & imm_0_2=0 {
    }
    :"loop0_" is imm_21_27=0b1001000 & imm_16_20 & imm_13=0 & imm_8_12 & imm_5_7 & imm_3_4 & imm_2=0 & imm_0_1 {
    }
    :"loop1_" is imm_21_27=0b1001001 & imm_16_20 & imm_13=0 & imm_8_12 & imm_5_7 & imm_3_4 & imm_2=0 & imm_0_1  {
    }
}

# CR:Pc add
with slot: iclass=0b0110 {
    :D5"=add(pc,#"imm_7_12")" is imm_16_27=0b101001001001 & imm_13=0 & imm_7_12 & imm_5_6=0 & D5 {
        D5 = inst_start + imm_7_12;
    }
}
# const ext 
wslot:D564"=add(pc,#"v")" is uimmw_hi & uimmw_lo & iclass64=0b0110  & imm64_27=1 & imm64_16_27=0b101001001001 & imm64_13=0 & uimm64_7_12 & imm64_5_6=0 & D564 [ v = (uimm64_7_12) | (uimmw_lo << 7) | (uimmw_hi << 21);]
{
        D564 = inst_start + v;
}

# CR:Pipelined loop
with slot: iclass=0b0110 {
    :"sp1loop0" is imm_21_27=0b0000101 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4 & imm_0_2 {
        _stub();
    }
    :"sp2loop0" is imm_21_27=0b0000110  & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4 & imm_0_2 {
        _stub();
    }
    :"sp3loop0" is imm_21_27=0b0000111  & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_3_4 & imm_0_2 {
        _stub();
    }

    :"sp1loop01" is imm_21_27=0b1001101 & imm_16_20 & imm_13=0 & imm_3_12 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"sp2loop01" is imm_21_27=0b1001110 & imm_16_20 & imm_13=0 & imm_3_12 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"sp2loopw1" is imm_21_27=0b1001111 & imm_16_20 & imm_13=0 & imm_3_12 & imm_2=0 & imm_0_1 {
        _stub();
    }
}


#CR: Logical predicates 
with slot: iclass=0b0110 {
    :D2_pred"=and("T2_pred", "S2_pred")" is imm_20_27=0b10110000 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred {
        D2_pred = T2_pred & S2_pred;
    }

    :D2_pred"=and("S2_pred", and("T2_pred","U2_pred"))" is imm_20_27=0b10110001 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred & T2_pred & U2_pred;
    }

    :D2_pred"=or("T2_pred", "S2_pred")" is imm_20_27=0b10110010 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred {
        D2_pred = T2_pred | S2_pred;
    }

    :D2_pred"=and("S2_pred", or("T2_pred","U2_pred"))" is imm_20_27=0b10110011 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred & (T2_pred | U2_pred);
    }

    :D2_pred"=xor("T2_pred", "S2_pred")" is imm_20_27=0b10110100 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred {
        D2_pred = T2_pred ^ S2_pred;
    }

    :D2_pred"=or("S2_pred", and("T2_pred","U2_pred"))" is imm_20_27=0b10110101 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred & (T2_pred | U2_pred);
    }

    :D2_pred"=and("T2_pred", !"S2_pred")" is imm_20_27=0b10110110 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred {
        D2_pred = T2_pred & (~S2_pred);
    }

    :D2_pred"=or("S2_pred", or("T2_pred","U2_pred"))" is imm_20_27=0b10110111 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred | (T2_pred | U2_pred);
    }

    :D2_pred"=and("S2_pred", and("T2_pred", !"U2_pred"))" is imm_20_27=0b10111001 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred & (T2_pred & ~U2_pred);
    }

    :D2_pred"=and("S2_pred", or("T2_pred", !"U2_pred"))" is imm_20_27=0b10111011 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred & (T2_pred | ~U2_pred);
    }

    :D2_pred"=not("S2_pred")" is imm_20_27=0b10111100 & imm_18_19=0 & S2_pred & imm_13=0 & imm_2_12=0 & D2_pred {
        D2_pred = ~S2_pred;
    }

    :D2_pred"=or("S2_pred", and("T2_pred", !"U2_pred"))" is imm_20_27=0b10111101 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred | (T2_pred & ~U2_pred);
    }

    :D2_pred"=or("T2_pred", !"S2_pred")" is imm_20_27=0b10111110 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & imm_2_7=0 & D2_pred {
        D2_pred = T2_pred | ~S2_pred;
    }

    :D2_pred"=or("S2_pred", or("T2_pred", !"U2_pred"))" is imm_20_27=0b10111111 & imm_18_19=0 & S2_pred & imm_13=0 & imm_10_12=0 & T2_pred & U2_pred & imm_2_5=0 & D2_pred {
        D2_pred = S2_pred | (T2_pred | ~U2_pred);
    }
}

# CR:User control register transfer
with slot: iclass=0b0110 {
    : D5_ctrl = S5 is imm_21_27=0b0010001 & S5 & imm_5_13=0 & D5_ctrl {
        D5_ctrl = S5;
    }
    slot: "D5_ctrl = S5 (dd/ss)" is imm_21_27=0b0011001 & S5_ctrl & imm_5_13=0 & D5 {
        _stub();
        #D5 = S5_ctrl;
    }
    slot: "D5 = S5_ctrl (dd/ss)" is imm_21_27=0b1000000 & S5_ctrl & imm_5_13=0 & D5 {
        _stub();
        #D5 = S5_ctrl;
    }
    slot: D5 = S5_ctrl is imm_21_27=0b1010000 & S5_ctrl & imm_5_13=0 & D5 {
        D5 = S5_ctrl;
    }
}

# JR
# JR:Call sub from reg
with slot: iclass=0b0101 {
	:"callr "S5 is imm_21_27=0b0000101 & S5 & imm_0_13=0 {
		LR=inst_next;
		call_tgt = S5;
	}
	:"callrh "S5 is imm_21_27=0b0000110 & S5 & imm_0_13=0 {
		LR=inst_next;
		call [S5];
	}

	:"if ("U2") callr" S5 is imm_21_27=0b0001000 & S5 & imm_10_13=0 & U2 & imm_0_7=0 {
		_stub();
	}
	:"if (!"U2") callr" S5 is imm_21_27=0b0001001 & S5 & imm_10_13=0 & U2 & imm_0_7=0 {
		_stub();
	}
}

# JR:Hinted call sub from reg - duped with call sub from reg

# JR:Hint indirect jmp
define pcodeop hintjr;
with slot: iclass=0b0101 {
	:"hintjr("S5")" is imm_21_27=0b0010101 & S5 & imm_0_13=0b00000000000000 {
		hintjr(S5);
	}
}

# JR:Jump to addr from reg
 with slot: iclass=0b0101 {
	 :"jumpr" S5 is imm_21_27=0b0010100 & S5 & imm_0_13=0 {
        branch_tgt = S5;
	 }
	 :"jumprh" S5 is imm_21_27=0b0010110 & S5 & imm_0_13=0 {
        branch_tgt = S5;
	 }

	 slot:"if("U2") jumpr:nt "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b00 & imm_10=0 & U2 & imm_0_7=0 {
        if(U2 == 0) goto inst_next;
        branch_tgt = S5;
	 }
	 slot:"if("U2".new) jumpr:nt "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b01 & imm_10=0 & U2 & imm_0_7=0 {
        _stub();
	 }
	 slot:"if("U2") jumpr:t "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b10 & imm_10=0 & U2 & imm_0_7=0 {
        if(U2 == 0) goto inst_next;
        branch_tgt = S5;
	 }
	 slot:"if("U2".new) jumpr:t "S5 is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12=0b11 & imm_10=0 & U2 & imm_0_7=0 {
        _stub();
	 }
	 slot:"if(!"U2") jumpr:nt "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b00 & imm_10=0 & U2 & imm_0_7=0 {
        if(U2 != 0) goto inst_next;
        branch_tgt = S5;
	 }
	 slot:"if(!"U2".new) jumpr:nt "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b01 & imm_10=0 & U2 & imm_0_7=0 {
        _stub();
	 }
	 slot:"if(!"U2") jumpr:t "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b10 & imm_10=0 & U2 & imm_0_7=0 {
        if(U2 != 0) goto inst_next;
        branch_tgt = S5;
	 }
	 slot:"if(!"U2".new) jumpr:t "S5 is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12=0b11 & imm_10=0 & U2 & imm_0_7=0 {
        _stub();
	 }
 }

# JR:Hint addr jmp from reg - duped with jupm to addr from reg

#J
#J:Call subroutine
with slot: iclass=0b0101 {
    Call_R22: v is imm_16_24 & imm_1_13u [v = inst_start + (((imm_1_13u) | (imm_16_24 << 13)) << 2) ; ] {
        local loc:4 = v;
        export loc;
      }
    Call_R152: v is imm_22_23 & imm_16_20u & imm_13u & imm_1_7u [v = inst_start + (((imm_22_23 << 13) | (imm_16_20u << 8)| (imm_13u << 7) | (imm_1_7u)) << 2); ] {
        local loc:4 = v;
        export loc;
      }

	 :"call" Call_R22 is imm_25_27=0b101 & Call_R22 & imm_0=0 {
        LR = inst_next;
        call_tgt = Call_R22;
	 }

	 :"if ("U2") call "Call_R152 is imm_24_27=0b1101 & imm_21=0 & Call_R152 & imm_12=0 & imm_11=0 & imm_10=0 & U2 & imm_0=0 {
		 if(U2 == 0) goto <end>;
		LR = inst_next;
		call_tgt = Call_R152;
		<end>
	 }

	 :"if (!"U2") call "Call_R152 is imm_24_27=0b1101 & imm_21=1 & Call_R152 & imm_12=0 & imm_11=0 & imm_10=0 & U2 & imm_0=0 {
		 if(U2 != 0) goto <end>;
		LR = inst_next;
		call_tgt = Call_R152;
		<end>
	 }
 }

#J:Compare and jump
 with slot: iclass=0b0001 {
      CJ_R9:r9 is  imm_20_21 & imm_1_7 [ r9 = inst_start+((imm_1_7 | (imm_20_21 << 7))<<2);] {
        export *[ram]:4 r9;
      }

     :"p0=cmp.eq("S4",#-1); if (p0.new) jump:nt "CJ_R9 is CJ_R9 & imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj1 " CJ_R9 is CJ_R9 &  imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj2 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0{
        
     _stub();
     }

     :"cj3 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0{
        
     _stub();
     }
     :"cj4 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0{
        
     _stub();
     }
     :"cj5 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00110 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0{
        
     _stub();
     }

     :"cj6 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0{
        
     _stub();
     }
     :"cj7 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0{
        
     _stub();
     }
     :"cj8 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=0 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0{
        
     _stub();
     }
#np
     :"cj9 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b00 & imm_1_7 & imm_0=0{
        
     _stub();
     }
     :"cj10 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b01 & imm_1_7 & imm_0=0{
        
     _stub();
     }
     :"cj11 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b00111 & imm_20_21 & S4 & imm_13=1 & imm_10_12 & imm_8_9=0b11 & imm_1_7 & imm_0=0{
        
     _stub();
     }
     
      
      :"P0.new=cmp.eq("S4", "imm_8_12"); if (P0.new) jump:nt "CJ_R9 is imm_27=0 & imm_22_26=0b00000 & S4 & imm_13=0 & imm_8_12 & imm_0=0 & CJ_R9 {
        if(S4 == imm_8_12) goto <good>;
        P0.new = 0xff;
        goto inst_next;
        <good>
        P0.new = 0x0;
        goto CJ_R9;
     }
     :"cj13 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00000 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj14 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00001 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
        
     _stub();
     }

     :"cj15 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00001 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj16 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00010 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj17 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00010 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj18 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00011 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj19 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00011 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
        
     _stub();
     }
     :"cj20 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00100 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj21 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00100 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj22 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00101 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj23 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b00101 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }

     :"cj24 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj25 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj26 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj27 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj28 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj29 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01110 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj30 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj31 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj32 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=0 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj33 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b00 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj34 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b01 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj35 "CJ_R9 is CJ_R9 &     imm_27=0 & imm_22_26=0b01111 & imm_20_21 & S4 & imm_13=1 & imm_10_12=0 & imm_8_9=0b11 & imm_1_7 & imm_0=0 {
	     _stub();
     }


     :"cj36 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01000 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj37 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01000 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj38 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01001 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj39 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01001 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
#np
     :"cj40 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01010 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj41 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01010 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj42 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01011 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj43 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01011 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj44 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01100 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj45 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01100 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj46 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01101 & imm_20_21 & S4 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj47 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b01101 & imm_20_21 & S4 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
	     _stub();
     }
# second chunk
     :"cj48 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b00 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj49 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b01 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj50 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b10 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
# page
     :"cj51 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010000 & imm_20_21 & S4 & imm_12_13=0b11 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }

     :"cj52 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b00 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj53 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b01 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj54 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b10 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj55 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010001 & imm_20_21 & S4 & imm_12_13=0b11 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }

     :"cj56 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b00 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj57 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b01 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj58 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b10 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj59 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010010 & imm_20_21 & S4 & imm_12_13=0b11 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }

     :"cj60 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b00 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj61 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b01 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj62 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b10 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj63 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010011 & imm_20_21 & S4 & imm_12_13=0b11 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }

     :"cj64 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b00 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj65 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b01 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj66 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b10 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj67 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010100 & imm_20_21 & S4 & imm_12_13=0b11 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }

     :"cj68 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b00 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj69 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b01 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj70 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b10 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }
     :"cj71 "CJ_R9 is CJ_R9 &   imm_27=0 & imm_22_26=0b010101 & imm_20_21 & S4 & imm_12_13=0b11 & imm_8_11 & imm_1_7 & imm_0=0 {
	     _stub();
     }

 }


# J/Jump to address
with slot: iclass=0b0101 {

    JImm: loc is imm_16_24 & imm_1_13 [loc = inst_start+(((imm_16_24 << 13) | (imm_1_13)) << 2);]{
        export *[ram]:4 loc;
    }

    :"J" JImm  is imm_25_27=0b100  &  imm_0=0 & JImm  {
    	branch_tgt = JImm;
     }
    
    IfImm: r15 is imm_1_7 & imm_13 & imm_16_20 & imm_22_23 [r15 = inst_start + ((imm_1_7 | (imm_13 << 7) | (imm_16_20 << 8) | (imm_22_23 << 13)) << 2);] {
        export r15;
    }

	 :"if ("U2") jump:nt "IfImm is  imm_24_27=0b1100 & imm_21=0 & imm_11_12=0b00 & imm_10=0 & U2 & imm_0=0 & IfImm  {
		 if(U2 == 0) goto <end>;
		 tgt_branch =  IfImm;
		 <end>
	 }

	 :"if ("U2") jump:t "IfImm is  imm_24_27=0b1100 & imm_21=0 & imm_11_12=0b10 & imm_10=0 & U2 & imm_0=0 & IfImm {
		 if(U2 == 0) goto <end>;
		 tgt_branch =  IfImm;
		 <end>
	 }
     
	 :"if (!"U2") jump:nt "IfImm is  imm_24_27=0b1100 & imm_21=1 & imm_11_12=0b00 & imm_10=0 & U2 & imm_0=0 & IfImm {
		 if(U2 != 0) goto <end>;
		 tgt_branch =  IfImm;
		 <end>
	 }

	 :"if (!"U2") jump:t "IfImm is  imm_24_27=0b1100 & imm_21=1 & imm_11_12=0b10 & imm_10=0 & U2 & imm_0=0 & IfImm {
		 if(U2 != 0) goto <end>;
		 tgt_branch =  IfImm;
		 <end>
	 }
 }
 
 # constant ext
 	wslot:"immext J"   is immw_hi & immw_lo & iclass64=0b0101 & imm64_25_27=0b100  &  imm64_0=0   {
_stub();
     }

# J/Jump to address cond new
with slot: iclass=0b0101 {
	 :"if ("U2_pred_new") jump:nt "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=0 & imm_11_12=0b01 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new == 0) goto <end>;
		 tgt_branch =  Call_R152;
		 <end>
	 }
	 :"if ("U2_pred_new") jump:t "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=0 & imm_11_12=0b11 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new == 0) goto <end>;
		 tgt_branch =  Call_R152;
		 <end>
	 }
	 :"if (!"U2_pred_new") jump:nt "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=1 & imm_11_12=0b01 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new != 0) goto <end>;
		 tgt_branch =  Call_R152;
		 <end>
	 }
	 :"if (!"U2_pred_new") jump:t "Call_R152 is imm_24_27=0b1100 & Call_R152 & imm_21=1 & imm_11_12=0b11 & imm_10=0 & U2_pred_new & imm_0=0 {
		 if(U2_pred_new != 0) goto <end>;
		 tgt_branch =  Call_R152;
		 <end>
	 }
}

# J/Jump to address cond reg
with slot: iclass=0b0110 {
    Jmp_R13: v is imm_21 & imm_13 & imm_1_11 [v = inst_start + (((imm_21 << 12)| (imm_13 << 11) | (imm_1_11)) << 2); ] {
        local loc:4 = v;
        export *:4 loc;
      }
	 :"if("S5"!=#0) jump:nt "Jmp_R13 is imm_22_27=0b000100 & Jmp_R13 & S5  & imm_12=0 & imm_0=0 {
	 	if(S5 == 0) goto inst_next;
		goto Jmp_R13;
	 }
	 :"if("S5"!=#0) jump:t "Jmp_R13 is imm_22_27=0b000100 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 == 0) goto inst_next;
		goto Jmp_R13;
	 }

	 :"if("S5">=#0) jump:nt "Jmp_R13 is imm_22_27=0b000101 & Jmp_R13 & S5 & imm_12=0 & imm_0=0 {
	 	if(S5 >= 0) goto inst_next;
		goto Jmp_R13;
	 }
	 :"if("S5">=#0) jump:t "Jmp_R13 is imm_22_27=0b000101 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 >= 0) goto inst_next;
		goto Jmp_R13;
	 }
	 :"if("S5"==#0) jump:nt "Jmp_R13  is imm_22_27=0b000110 & Jmp_R13 & S5 & imm_12=0 & imm_0=0 {
	 	if(S5 == 0) goto inst_next;
		goto Jmp_R13;
	 }
	 :"if("S5"==#0) jump:t "Jmp_R13  is imm_22_27=0b000110 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 == 0) goto inst_next;
		goto Jmp_R13;
	 }
	 :"if("S5">=#0) jump:nt "Jmp_R13  is imm_22_27=0b000111 & Jmp_R13 & S5 & imm_12=0 & imm_0=0 {
	 	if(S5 >= 0) goto inst_next;
		goto Jmp_R13;
	 }
	 :"if("S5">=#0) jump:t "Jmp_R13  is imm_22_27=0b000111 & Jmp_R13 & S5 & imm_12=1 & imm_0=0 {
	 	if(S5 >= 0) goto inst_next;
		goto Jmp_R13;
	 }
 }

# J/Transfer and jump
with slot: iclass=0b0001 {
    TransJmp_R9: v is imm_20_21 & imm_1_7 [v = inst_start + (((imm_20_21 << 7) | (imm_1_7)) << 2); ] {
        local loc:4 = v;
        export *:4 loc;
      }
	 slot:D4_16_19"=num; jump "TransJmp_R9 is imm_24_27=0b0110 & imm_22_23=0 & D4_16_19 & imm_8_13 & TransJmp_R9 & imm_0=0 {
     _stub();
	 }
	 slot:D4_8_11"="S4"; jump "TransJmp_R9 is imm_24_27=0b0111 & imm_22_23=0 & S4 & imm_12_13=0 & D4_8_11 & TransJmp_R9 & imm_0=0 {
     _stub();
	 }
}

#LD:Load dword
with slot: iclass=0b0011 {
    :D5"=dword0" is imm_21_27=0b1010110  & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6=0 & D5 {
    	_stub();
    }
}
with slot: iclass=0b0100 {
    :D5"=dword1" is imm_27=1 & imm_25_26 & imm_21_24=0b1110 & imm_16_20 & imm_5_13 & D5 {
    	_stub();
    }
}
with slot: iclass=0b1001 {
	:D5_pair"=memd("S5",#"s11")" is imm_27=0 & imm_25_26 & S5 & D5_pair & imm_5_13 [ s11 = ((imm_5_13 | (imm_25_26 << 9))<<3);] {
        local EA:4 = S5 + s11;
        D5_pair = *[ram]:4 EA;
    }
    :D5"=dword3" is imm_21_27=0b1001110 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
    	_stub();
    }
    :D5"=dword4" is imm_21_27=0b1001110 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
    	_stub();
    }
    
    :D5"=dword5" is imm_21_27=0b1011110 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
    	_stub();
    }
    
    :D5_pair"=memd("S5"++#"v")" is imm_21_27=0b1011110 & S5 & imm_12_13=0b00 & imm_9_11 & imm_5_8 & D5_pair [v = imm_5_8 << 3;] {
        local EA:4 = S5;
        S5 = S5+v;
        D5_pair = *[ram]:4 EA;
    }
    
    :D5"=dword7" is imm_21_27=0b1011110 & S5 & imm_13 & imm_12=1 & imm_5_11 & D5 {
    	_stub();
    }
    
    :D5"=dword8" is imm_21_27=0b1101110 & S5 & imm_13 & imm_12=0 & imm_8_12=0 & imm_7=0 & imm_5_6=0 & D5 {
    	_stub();
    }
    :D5"=dword9" is imm_21_27=0b1111110 & S5 & imm_13 & imm_12=0 & imm_8_12=0 & imm_7=0 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:Load ac dword
with slot: iclass=0b1001 {
    :"memd_aq" is imm_21_27=0b0010000 & S5 & imm_11_13=0b011 & imm_8_10=0 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}

#LD:Load dword cond
with slot: iclass=0b0011 {
    :"ldcondd0" is imm_21_27=0b0000110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondd1" is imm_21_27=0b0001110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondd2" is imm_21_27=0b0010110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondd3" is imm_21_27=0b0011110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
}
with slot: iclass=0b0100 {
    :"if("T2_11_12_pred") "D5_pair"=memd("S5"+#"u6")" is imm_21_27=0b0001110 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10 & D5_pair [ u6 = imm_5_10 << 3;]{
        if(T2_11_12_pred == 0) goto inst_next;
        local EA:4 = S5 + u6;
        D5_pair = *[ram]:4 EA;
    }
    :"ldcondd5" is imm_21_27=0b0011110 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5 {
    	_stub();
    }
    :"ldcondd6" is imm_21_27=0b0101110 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5 {
    	_stub();
    }
    :"ldcondd7" is imm_21_27=0b0111110 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5 {
    	_stub();
    }
}

with slot: iclass=0b1001 {
    :"if("T2_9_10_pred") "D5_pair"=memd("S5"++#"s4")" is imm_21_27=0b1011110 & S5 & imm_11_13=0b100 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        if(T2_9_10_pred == 0) goto inst_next;
        local EA:4 = S5;
        S5 = S5 + s4;
        D5_pair = *[ram]:8 EA;
    }
    :"if(!"T2_9_10_pred") "D5_pair"=memd("S5"++#"s4")" is imm_21_27=0b1011110 & S5 & imm_11_13=0b101 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        if(T2_9_10_pred != 0) goto inst_next;
        local EA:4 = S5;
        S5 = S5 + s4;
        D5_pair = *[ram]:8 EA;
    }
    #TODO: check all dotnew, they will need change later
    :"if("T2_9_10_pred".new) "D5_pair"=memd("S5"++#"s4")" is imm_21_27=0b1011110 & S5 & imm_11_13=0b110 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        if(T2_9_10_pred == 0) goto inst_next;
        local EA:4 = S5;
        S5 = S5 + s4;
        D5_pair = *[ram]:8 EA;
    }
    :"ldcondd11" is imm_21_27=0b1011110 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5 {
    	_stub();
    }

    :"ldcondd12" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondd13" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondd14" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondd15" is imm_21_27=0b1111110 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:Load by
with slot: iclass=0b0011 {
    :"rd=memb1" is imm_21_27=0b1010000 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"rd=memb2" is imm_27=1 & imm_25_26 & imm_21_24=0b1000 & imm_16_20 & imm_5_13 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"rd=memb3" is imm_27=0 & imm_25_26 & imm_21_24=0b1000 & S5 & imm_5_13 & D5  {
        _stub();
    }
    :"rd=memb4" is imm_21_27=0b1001000 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memb5" is imm_21_27=0b1001000 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"rd=memb6" is imm_21_27=0b1011000 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memb7" is imm_21_27=0b1011000 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memb8" is imm_21_27=0b1101000 & S5 & imm_13 & imm_12=1 & imm_8_11 & imm_7 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memb9" is imm_21_27=0b1101000 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memb10" is imm_21_27=0b1111000 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}

#LD:Load by cond
with slot: iclass=0b0011 {
    :"ldcondb0" is imm_21_27=0b0000000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondb1" is imm_21_27=0b0001000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondb2" is imm_21_27=0b0010000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
    :"ldcondb3" is imm_21_27=0b0011000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5 {
    	_stub();
    }
}
with slot: iclass=0b0100 {
    :"if("T2_11_12_pred") "D5_pair"=memb("S5"+#"u6")" is imm_21_27=0b0001000 & S5 & imm_13=0 & T2_11_12_pred & imm_5_10 & D5_pair [ u6 = imm_5_10 << 3;]{
    	_stub();
    }
    :"ldconbd5" is imm_21_27=0b0011000 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5 {
    	_stub();
    }
    :"ldconbd6" is imm_21_27=0b0101000 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5 {
    	_stub();
    }
    :"ldconbd7" is imm_21_27=0b0111000 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5 {
    	_stub();
    }
}
with slot: iclass=0b1001 {
    :"if("T2_9_10_pred") "D5_pair"=memb("S5"++#"s4")" is imm_21_27=0b1011000 & S5 & imm_11_13=0b100 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
    _stub();
    }
    :"if(!"T2_9_10_pred") "D5_pair"=memb("S5"++#"s4")" is imm_21_27=0b1011000 & S5 & imm_11_13=0b101 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
    _stub();
    }
    #TODO: check all dotnew, they will need change later
    :"if("T2_9_10_pred".new) "D5_pair"=memb("S5"++#"s4")" is imm_21_27=0b1011000 & S5 & imm_11_13=0b110 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
    _stub();
    }
    :"ldcondb11" is imm_21_27=0b1011000 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5 {
    	_stub();
    }

    :"ldcondb12" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondb13" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondb14" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondb15" is imm_21_27=0b1111000 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:Load by shift TODO
#LD:Load by h shift TODO

#ld:load hw
with slot: iclass=0b0011 {
    :"rd=memh1" is imm_21_27=0b1010010 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"rd=memh2" is imm_27=1 & imm_25_26 & imm_21_24=0b1010 & imm_16_20 & imm_5_13 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"rd=memh3" is imm_27=0 & imm_25_26 & imm_21_24=0b1010 & S5 & imm_5_13 & D5  {
        _stub();
    }
    :"rd=memh4" is imm_21_27=0b1001010 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memh5" is imm_21_27=0b1001010 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"rd=memh6" is imm_21_27=0b1011010 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memh7" is imm_21_27=0b1011010 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memh8" is imm_21_27=0b1101010 & S5 & imm_13 & imm_12=1 & imm_8_11 & imm_7 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memh9" is imm_21_27=0b1101010 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memh10" is imm_21_27=0b1111010 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}

#ld:load hw cond
with slot: iclass=0b0011 {
    :"rd=memhc1" is imm_21_27=0b0000010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhc1" is imm_21_27=0b0001010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhc1" is imm_21_27=0b0010010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhc1" is imm_21_27=0b0011010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"rd=memhc2" is imm_21_27=0b0001010 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=memhc2" is imm_21_27=0b0011010 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=memhc2" is imm_21_27=0b0101010 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=memhc2" is imm_21_27=0b0111010 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"if("T2_9_10_pred") "D5_pair"=memh("S5"++#"s4")" is imm_21_27=0b1011010 & S5 & imm_11_13=0b100 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        _stub();
    }
    :"if(!"T2_9_10_pred") "D5_pair"=memh("S5"++#"s4")" is imm_21_27=0b1011010 & S5 & imm_11_13=0b101 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        _stub();
    }
    #TODO: check all dotnew, they will need change later
    :"if("T2_9_10_pred".new) "D5_pair"=memh("S5"++#"s4")" is imm_21_27=0b1011010 & S5 & imm_11_13=0b110 &   T2_9_10_pred & imm_5_8 & D5_pair [s4 = imm_5_8 << 3;] {
        _stub();
    }
    :"ldcondh11" is imm_21_27=0b1011010 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5 {
    	_stub();
    }

    :"ldcondh12" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondh13" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondh14" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondh15" is imm_21_27=0b1111010 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#LD:memory copy
with slot: iclass=0b1001 {
    :D5"=memcp" is imm_21_27=0b1001111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}
#LD:piecemeal memory copy: TODO

#ld:load ub
with slot: iclass=0b0011 {
    :D5"=memub("S5"+"T5"#"u2")" is imm_21_27=0b1010001 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5 [ u2 = (imm_7) | (imm_13 << 1);]  {
        local tmp:4 = T5 << u2;
        local tmp2:4 = S5 + T5;
        D5 = *[ram]:1 tmp2;
    }
}
with slot: iclass=0b0100 {
    :"rd=memub2" is imm_27=1 & imm_25_26 & imm_21_24=0b1001 & imm_16_20 & imm_5_13 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"rd=memub3" is imm_27=0 & imm_25_26 & imm_21_24=0b1001 & S5 & imm_5_13 & D5  {
        _stub();
    }
    :"rd=memub4" is imm_21_27=0b1001001 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memub5" is imm_21_27=0b1001001 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"rd=memub6" is imm_21_27=0b1011001 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memub7" is imm_21_27=0b1011001 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memub8" is imm_21_27=0b1101001 & S5 & imm_13 & imm_12=1 & imm_8_11 & imm_7 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memub9" is imm_21_27=0b1101001 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memub10" is imm_21_27=0b1111001 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}


#ld:load ub cond
with slot: iclass=0b0011 {
    :"rd=membuc1" is imm_21_27=0b0000001 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=membuc2" is imm_21_27=0b0001001 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=membuc3" is imm_21_27=0b0010001 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=membuc4" is imm_21_27=0b0011001 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"rd=membuc5" is imm_21_27=0b0001001 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=membuc6" is imm_21_27=0b0011001 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=membuc7" is imm_21_27=0b0101001 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=membuc8" is imm_21_27=0b0111001 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"rd=membuc9" is imm_21_27=0b1011001 & S5 & imm_11_13=0b100 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=membuc10" is imm_21_27=0b1011001 & S5 & imm_11_13=0b101 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=membuc11" is imm_21_27=0b1011001 & S5 & imm_11_13=0b110 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=membuc12" is imm_21_27=0b1011001 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }

    :"ldcondub13" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondub14" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondub15" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldcondub16" is imm_21_27=0b1111001 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}

#ld:load uhw
with slot: iclass=0b0011 {
    :D5"=memuh("S5"+"T5"#"u2")" is imm_21_27=0b1010011 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5 [ u2 = (imm_7) | (imm_13 << 1);]  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"rd=memuh2" is imm_27=1 & imm_25_26 & imm_21_24=0b1011 & imm_16_20 & imm_5_13 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"rd=memuh3" is imm_27=0 & imm_25_26 & imm_21_24=0b1011 & S5 & imm_5_13 & D5  {
        _stub();
    }
    :"rd=memuh4" is imm_21_27=0b1001011 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memuh5" is imm_21_27=0b1001011 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }

    :"rd=memuh6" is imm_21_27=0b1011011 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memuh7" is imm_21_27=0b1011011 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5 {
        _stub();
    }
    :"rd=memuh8" is imm_21_27=0b1101011 & S5 & imm_13 & imm_12=1 & imm_8_11 & imm_7 & imm_5_6 & D5 {
        _stub();
    }
    :"rd=memuh9" is imm_21_27=0b1101011 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
    :"rd=memuh10" is imm_21_27=0b1111011 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5 {
        _stub();
    }
}

#ld:load uhw cond
with slot: iclass=0b0011 {
    :"rd=memhuc1" is imm_21_27=0b0000011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhuc2" is imm_21_27=0b0001011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhuc3" is imm_21_27=0b0010011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memhuc4" is imm_21_27=0b0011011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"rd=memhuc5" is imm_21_27=0b0001011 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=memhuc6" is imm_21_27=0b0011011 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=memhuc7" is imm_21_27=0b0101011 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"rd=memhuc8" is imm_21_27=0b0111011 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"rd=memhuc9" is imm_21_27=0b1011011 & S5 & imm_11_13=0b100 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memhuc10" is imm_21_27=0b1011011 & S5 & imm_11_13=0b101 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memhuc11" is imm_21_27=0b1011011 & S5 & imm_11_13=0b110 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memhuc12" is imm_21_27=0b1011011 & S5 & imm_11_13=0b111 & imm_11_12 & imm_5_8 & D5  {
        _stub();
    }

    :"ldconduh13" is imm_21_27=0b1111011 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldconduh14" is imm_21_27=0b1111011 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldconduh15" is imm_21_27=0b1111011 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
    :"ldconduh16" is imm_21_27=0b1111011 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5 {
    	_stub();
    }
}


# LD
    # Special case for constant extender
    wslot:"immext #"v" "D564"=memw("S564"+#"v1")" is immw_hi & immw_lo & iclass64=0b1001 & imm64_27=0 & imm64_25_26 & imm64_21_24=0b1100 & S564 & imm64_5_13 & D564 [v = (imm64_5_13 | (imm64_25_26 << 9) | (immw_lo << 7) | (immw_hi << 21)  )<<2; v1 = v;]{
        local EA:4 = S564 + v;
        D564 = *[ram]:4 EA;
    }

#LD:Load word
with slot: iclass=0b0011 {
    :D5"=memw("S5"+"T5"<<#"u2")" is imm_21_27=0b1010100 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5 [ u2 = (imm_7) | (imm_13 << 1);]  {
        local tmp:4 = T5 << u2;
        local tmp2:4 = S5 + T5;
        D5 = *[ram]:4 tmp2;
    }
}
with slot: iclass=0b0100 {
    :"rd=memw1" is imm_27=1 & imm_25_26 & imm_21_24=0b1100 & S5 & imm_5_13 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :D5"=memw("S5"+#"s11")" is imm_27=0 & imm_25_26 & imm_21_24=0b1100 & S5 & imm_5_13 & D5 [s11 = (imm_5_13 | (imm_25_26 << 9))<<2;] {
        local tmp:2 = s11 << 3;
        local tmp1:2 = tmp s>> 3;
        local EA:4 = S5 + sext(tmp1);
        D5 = *[ram]:4 EA;
    }

    :"rd=memw3" is imm_21_27=0b1001100 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memw4" is imm_21_27=0b1001100 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memw5" is imm_21_27=0b1011100 & S5 & imm_12_13=0b01 & imm_8_11 & imm_7=0 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memw6" is imm_21_27=0b1011100 & S5 & imm_12_13=0b00 & imm_9_11=0 & imm_5_8 & D5  {
        _stub();
    }
    :"rd=memw7" is imm_21_27=0b1101100 & S5 & imm_13 & imm_12=1 & imm_8_11 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"rd=memw8" is imm_21_27=0b1101100 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5  {
        _stub();
    }
    :"rd=memw9" is imm_21_27=0b1111100 & S5 & imm_13 & imm_12=0 & imm_8_11=0 & imm_7=0 & imm_5_6=0 & D5  {
        _stub();
    }
}

#LD:Load ac word
with slot: iclass=0b1001 {
    :"memw_aq" is imm_21_27=0b0010000 & S5 & imm_11_13=0b001 & imm_8_10=0 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}


#LD:Load word cond
with slot: iclass=0b0011 {
    :"lwcond0()" is imm_21_27=0b0000100 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"lwcond1()" is imm_21_27=0b0001100 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"lwcond3()" is imm_21_27=0b0010100 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
    :"lwcond4()" is imm_21_27=0b0011100 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"lwcond5()" is imm_21_27=0b0001100 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"lwcond6()" is imm_21_27=0b0011100 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"lwcond7()" is imm_21_27=0b0101100 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
    :"lwcond8()" is imm_21_27=0b0111100 & S5 & imm_13=0 & imm_11_12 & imm_5_10 & D5  {
        _stub();
    }
}
with slot: iclass=0b1001 {
    :"lwcond9()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b100 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"lwcond10()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b101 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"lwcond11()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b110 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }
    :"lwcond11()" is imm_21_27=0b1011100 & S5 & imm_11_13=0b111 & imm_9_10 & imm_5_8 & D5  {
        _stub();
    }

    :"lwcond12()" is imm_21_27=0b1111100 & imm_16_20 & imm_11_13=0b100 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5  {
        _stub();
    }
    :"lwcond13()" is imm_21_27=0b1111100 & imm_16_20 & imm_11_13=0b101 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5  {
        _stub();
    }
    :"lwcond14()" is imm_21_27=0b1111100 & imm_16_20 & imm_11_13=0b110 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5  {
        _stub();
    }
    :"lwcond15()" is imm_21_27=0b1111100 & imm_16_20 & imm_11_13=0b111 & imm_9_10 & imm_8 & imm_7=1 & imm_5_6=0 & D5  {
        _stub();
    }
}

#LD:Dealloc
with slot: iclass=0b1001 {
    :D5_pair"=deallocframe("S5"):raw" is imm_21_27=0b0000000 & S5 & imm_13=0 & imm_5_12=0 & D5_pair & imm_0=0 {
        local EA:4 = S5;
        local tmp:8 = *[ram]:8 EA;
        D5_pair = tmp;
        SP=EA+8;
    }
}

#LD:Dealloc return
with slot: iclass=0b1001 {
    slot:D5_pair"=dealloc_return("S5"):raw" is imm_21_27=0b0110000 & S5 & imm_10_13=0 & imm_5_9=0 & D5_pair & imm_0=0 {
        local EA:4 = S5;
        local tmp:8 = *[ram]:8 EA;
        D5_pair = tmp;

        local tmp2:8 = tmp>>32;
        local tmp3:4 = tmp2:4;

        SP = EA+8;
        return [tmp3];
    }
}
#TODO

#LD:Ld and unpack by to hw TODO

# MEMOP/hw
with slot: iclass=0b0011 {
    :"memopb0" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b00 & T5 {
    _stub();
    }
    :"memopb1" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b01 & T5 {
    _stub();
    }
    :"memopb2" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b10 & T5 {
    _stub();
    }
    :"memopb3" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
    _stub();
    }


    :"memopb4" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b00 & T5 {
    _stub();
    }
    :"memopb5" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b01 & T5 {
    _stub();
    }
    :"memopb6" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b10 & T5 {
    _stub();
    }
    :"memopb7" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
    _stub();
    }
}

# MEMOP/byte
with slot: iclass=0b0011 {
    :"memopb0" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b00 & T5 {
    _stub();
    }
    :"memopb1" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b01 & T5 {
    _stub();
    }
    :"memopb2" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b10 & T5 {
    _stub();
    }
    :"memopb3" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
    _stub();
    }


    :"memopb4" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b00 & T5 {
    _stub();
    }
    :"memopb5" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b01 & T5 {
    _stub();
    }
    :"memopb6" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b10 & T5 {
    _stub();
    }
    :"memopb7" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
    _stub();
    }
}

# MEMOP/word
with slot: iclass=0b0011 {
    slot:"memw()+=R" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b00 & T5 {
    _stub();
    }

    slot:"memw()-=R" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b01 & T5 {
    _stub();
    }

    :"memw()&=R" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b10 & T5 {
    _stub();
    }

    :"memw()|=R" is imm_24_27=0b1110 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
    _stub();
    }

    :"memw()+=I" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b00 & T5 {
    _stub();
    }

    :"memw()-=I" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b01 & T5 {
    _stub();
    }

    :"memw()=clrbit" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b10 & T5 {
    _stub();
    }

    :"memw()=setbit" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
    _stub();
    }
}

# NV/J
with slot: iclass=0b0010 {
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000010 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000010 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000011 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000011 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000100 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000100 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000101 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000101 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000110 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000110 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000111 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b000111 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b001000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b001000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b001001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,rt) jmp" is imm_22_27=0b001001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & T5 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010010 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010010 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010011 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010011 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010100 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010100 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010101 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010101 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010110 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010110 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010111 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b010111 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011000 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011001 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }

    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011010 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011010 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011011 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=0 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
    :"if(cmp(nsnew,u5) jmp" is imm_22_27=0b011011 & imm_20_21 & imm_19=0 & imm_16_18 & imm_13=1 & imm_8_12 & imm_1_7 & imm_0=0 {
    _stub();
    }
}

# NV/ST:ST new-value byte
with slot: iclass=0b0011 {
    :"membnew1" is imm_21_27=0b1011101 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & imm_3_4=0b00 & imm_0_2 {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"membnew2" is imm_27=1 & imm_25_26 & imm_21_24=0b0101 & imm_16_20 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_0_7 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"membnew3" is imm_27=0 & imm_25_26 & imm_21_24=0b1101 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_0_7 {
    _stub();
    }
    :"membnew4" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
    _stub();
    }
    :"membnew5" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"membnew6" is imm_21_27=0b1011101 & S5 & imm_11_13=0b000 & imm_8_10 & imm_7=1 & imm_6=0 & imm_0_5 {
    _stub();
    }
    :"membnew7" is imm_21_27=0b1011101 & S5 & imm_11_13=0b000 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"membnew8" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=1 & imm_6 & imm_0_5 {
    _stub();
    }
    :"membnew9" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
    :"membnew10" is imm_21_27=0b1111101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
}

# NV/ST:ST new-value byte cond
with slot: iclass=0b0011 {
    :"stnvcond00()" is imm_21_27=0b0100101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
    :"stnvcond01()" is imm_21_27=0b0101101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
    :"stnvcond02()" is imm_21_27=0b0110101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
    :"stnvcond03()" is imm_21_27=0b0111101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b00 & T3_0_2  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"if(pv)memb" is imm_21_27=0b0000101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(pv.new)memb" is imm_21_27=0b0010101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv)memb" is imm_21_27=0b0100101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv.new)memb" is imm_21_27=0b0110101 & S5 & imm_13 & imm_11_12=0b00 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"if(pv)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(pv.new)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"if(!pv)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv.new)memb" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b00 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"if(pv)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b000 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b000 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"if(pv.new)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b100 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"if(!pv.new)memb" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b100 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# NV/ST:ST new-value half word
with slot: iclass=0b0011 {
    :"memhnew1" is imm_21_27=0b1011101 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & imm_3_4=0b01 & imm_0_2 {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"memhnew2" is imm_27=1 & imm_25_26 & imm_21_24=0b0101 & imm_16_20 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_0_7 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"memhnew3" is imm_27=0 & imm_25_26 & imm_21_24=0b1101 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_0_7 {
    _stub();
    }
    :"memhnew4" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
    _stub();
    }
    :"memhnew5" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"memhnew6" is imm_21_27=0b1011101 & S5 & imm_11_13=0b001 & imm_8_10 & imm_7=1 & imm_6=0 & imm_0_5 {
    _stub();
    }
    :"memhnew7" is imm_21_27=0b1011101 & S5 & imm_11_13=0b001 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"memhnew8" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=1 & imm_6 & imm_0_5 {
    _stub();
    }
    :"memhnew9" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
    :"memhnew10" is imm_21_27=0b1111101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
}
# NV/ST:ST new-value half word cond
with slot: iclass=0b0011 {
    :"stnvcondh00()" is imm_21_27=0b0100101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
    :"stnvcondh01()" is imm_21_27=0b0101101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
    :"stnvcondh02()" is imm_21_27=0b0110101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
    :"stnvcondh03()" is imm_21_27=0b0111101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b01 & T3_0_2  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"stnvcondh04()" is imm_21_27=0b0000101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh05()" is imm_21_27=0b0010101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh06()" is imm_21_27=0b0100101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh07()" is imm_21_27=0b0110101 & S5 & imm_13 & imm_11_12=0b01 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"stnvcondh08()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh09()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondh10()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh11()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b01 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"stnvcondh12()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b001 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh13()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b001 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondh14()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b101 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondh15()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b101 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# NV/ST:ST new-value word
with slot: iclass=0b0011 {
    :"memwnew1" is imm_21_27=0b1011101 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & imm_3_4=0b10 & imm_0_2 {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"memwnew2" is imm_27=1 & imm_25_26 & imm_21_24=0b0101 & imm_16_20 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_0_7 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"memwnew3" is imm_27=0 & imm_25_26 & imm_21_24=0b1101 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_0_7 {
    _stub();
    }
    :"memwnew4" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
    _stub();
    }
    :"memwnew5" is imm_21_27=0b1001101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"memwnew6" is imm_21_27=0b1011101 & S5 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_6=0 & imm_0_5 {
    _stub();
    }
    :"memwnew7" is imm_21_27=0b1011101 & S5 & imm_11_13=0b010 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
    _stub();
    }
    :"memwnew8" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_6 & imm_0_5 {
    _stub();
    }
    :"memwnew9" is imm_21_27=0b1101101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
    :"memwnew10" is imm_21_27=0b1111101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_0_6 {
    _stub();
    }
}

# NV/ST:ST new-value word cond
with slot: iclass=0b0011 {
    :"stnvcondw00()" is imm_21_27=0b0100101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
    :"stnvcondw01()" is imm_21_27=0b0101101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
    :"stnvcondw02()" is imm_21_27=0b0110101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
    :"stnvcondw03()" is imm_21_27=0b0111101 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & imm_3_4=0b10 & T3_0_2  {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"stnvcondw04()" is imm_21_27=0b0000101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw05()" is imm_21_27=0b0010101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw06()" is imm_21_27=0b0100101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw07()" is imm_21_27=0b0110101 & S5 & imm_13 & imm_11_12=0b10 & imm_8_10 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"stnvcondw08()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw09()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondw10()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw11()" is imm_21_27=0b1011101 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"stnvcondw12()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw13()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stnvcondw14()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b110 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stnvcondw15()" is imm_21_27=0b1111101 & imm_18_20=0 & imm_16_17 & imm_11_13=0b110 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}



#with slot: iclass=0b0011 {
#    :"memw()=setbit" is imm_24_27=0b1111 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_7_12 & imm_5_6=0b11 & T5 {
#    _stub();
#    }
#}


# ST:Store dword
with slot: iclass=0b0011 {
    :"memd0" is imm_21_27=0b1011110 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5  {
	    _stub();
    }
}
with slot: iclass=0b0100 {
    :"memd1" is imm_27=1 & imm_25_26 & imm_21_24=0b0110 & imm_16_20 & imm_13 & T5 & imm_0_7 {
	    _stub();
    }
}
with slot: iclass=0b1010 {
    :"memd("S5"+#"s11")="T5_pair is imm_27=0 & imm_25_26 & imm_21_24=0b1110 & S5 & imm_13 & T5_pair & imm_0_7 [ s11 = ((imm_0_7) | (imm_13 << 8) | (imm_25_26 << 9)) << 3;] {
        local EA:4 = S5 + s11;
        *[ram]:8 EA = T5_pair;
    }

     :"memd3" is imm_21_27=0b1001110 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
	    _stub();
     }
     :"memd4" is imm_21_27=0b1001110 & S5 & imm_13 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
	    _stub();
     }
     :"memd5" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_5 {
	    _stub();
     }
     :"memd("S5"++#"s4")="T5_pair is imm_21_27=0b1011110 & S5 & imm_13=0 & T5_pair & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 [ s4 = imm_3_6 << 3;] {
        local EA:4 = S5;
        S5 = S5 + s4;
        *[ram]:8 EA = T5_pair;
     }
     :"memd7" is imm_21_27=0b1101110 & S5 & imm_13 & T5 & imm_7=1 & imm_6 & imm_0_5 {
	    _stub();
     }
     :"memd8" is imm_21_27=0b1101110 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
	    _stub();
     }
     :"memd9" is imm_21_27=0b1111110 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
	    _stub();
     }
}

# ST:Store rel dw
with slot: iclass=0b0101 {
    :"memdrl0" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b0010 & imm_0_1  {
    _stub();
    }
    :"memdrl1" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b1010 & imm_0_1  {
    _stub();
    }
}

# ST:Store dw cond
with slot: iclass=0b0011 {
    :"stcondd00" is imm_21_27=0b0100110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondd01" is imm_21_27=0b0101110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondd02" is imm_21_27=0b0110110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondd03" is imm_21_27=0b0111110 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"if("D2_pred" memd("S5"+#"u6")="T5_pair is imm_21_27=0b0000110 & S5 & imm_13 & T5_pair & imm_3_7 & imm_2=0 & D2_pred [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
        if(D2_pred == 0) goto inst_next;
        local EA:4 = S5 + u6;
        *[ram]:8 EA = T5_pair;
    }
    :"stcond05" is imm_21_27=0b0010110 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
    :"stcond06" is imm_21_27=0b0100110 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
    :"stcond07" is imm_21_27=0b0110110 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"stcondd08()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondd09()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stcondd10()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondd11()" is imm_21_27=0b1011110 & S5 & imm_13=1 & imm_11_12=0b10 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"stcondd12()" is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondd13()" is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17 & imm_11_13=0b010 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stcondd14()" is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17 & imm_11_13=0b110 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondd15()" is imm_21_27=0b1111110 & imm_18_20=0 & imm_16_17 & imm_11_13=0b110 & imm_8_10 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}


# ST:Store by
with slot: iclass=0b0011 {
    :"stb0" is imm_21_27=0b1011000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6=0 & imm_0_4  {
    _stub();
    }
    :"memb("S5"+#"imm_7_12")=#"S8 is imm_25_27=0b110 & imm_23_24=0 & imm_21_22=0b00 & S5 & imm_13 & imm_7_12 & imm_0_6 [ S8 = (imm_0_6) | (imm_13 << 7);]{
        local EA:4 = S5 + imm_7_12;
        *[ram]:1 EA = S8;
    }
}
with slot: iclass=0b0100 {
    :"stb2" is imm_27=1 & imm_25_26 & imm_21_24=0b0000 & imm_16_20 & imm_13 & imm_8_12 & imm_0_7 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"memb("S5"+#"s11")="T5 is imm_27=0 & imm_25_26 & imm_21_24=0b1000 & S5 & imm_13 & T5 & imm_0_7 [ s11 = (imm_0_7) | (imm_13 << 9) | (imm_25_26 << 10);]{
        local EA:4 = S5 + s11;
        *[ram]:1 EA = T5;
    }
    :"stb5" is imm_21_27=0b1001000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0  {
    _stub();
    }
    :"stb6" is imm_21_27=0b1001000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_2_6=0 & imm_1=0 & imm_0=0  {
    _stub();
    }
    :"stb7" is imm_21_27=0b1011000 & S5 & imm_13=0 & imm_8_12 & imm_7=1 & imm_2_6=0 & imm_0_5  {
    _stub();
    }
    :"stb8" is imm_21_27=0b1011000 & S5 & imm_13=0 & imm_8_12 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0  {
    _stub();
    }
    :"stb9" is imm_21_27=0b1101000 & S5 & imm_13 & imm_8_12 & imm_7=1 & imm_6 & imm_0_5 {
    _stub();
    }
    :"stb10" is imm_21_27=0b1101000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_0_6=0 {
    _stub();
    }
    :"stb11" is imm_21_27=0b1111000 & S5 & imm_13 & imm_8_12 & imm_7=0 & imm_0_6=0 {
    _stub();
    }
}

# ST:Store by cond
with slot: iclass=0b0011 {
    :"stcondb00" is imm_21_27=0b0100000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondb01" is imm_21_27=0b0101000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondb02" is imm_21_27=0b0110000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
    :"stcondb03" is imm_21_27=0b0111000 & S5 & imm_13 & imm_8_12 & imm_7 & imm_5_6 & D5  {
    _stub();
    }
}
with slot: iclass=0b0011 {
#    :"if("D2_pred" memb("S5"+#"u6")="T5_pair is imm_21_27=0b1000000 & S5 & imm_13 & T5_pair & imm_3_7 & imm_2=0 & D2_pred [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
#    _stub();
#    }

    :"stconb04" is imm_21_27=0b1000000 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4  {
    _stub();
    }
    :"stconb05" is imm_21_27=0b1000100 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4  {
    _stub();
    }
    :"stconb06" is imm_21_27=0b1001000 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4  {
    _stub();
    }
    :"stconb07" is imm_21_27=0b1001100 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4  {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"if("D2_pred" memb("S5"+#"u6")="T5 is imm_21_27=0b0000000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred [u6 =(imm_3_7 | (imm_13 << 5)) << 3;] {
    _stub();
    }
    :"stconb09" is imm_21_27=0b0010000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
    :"stconb10" is imm_21_27=0b0100000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
    :"stconb11" is imm_21_27=0b0110000 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & D2_pred  {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"stcondb08()" is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondb09()" is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stcondb10()" is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondb11()" is imm_21_27=0b1011000 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"stcondb12()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondb13()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"stcondb14()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"stcondb15()" is imm_21_27=0b1111000 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# ST:Store HW 
with slot: iclass=0b0011 {
    :"memh0" is imm_21_27=0b1011010 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5 {
        _stub();
    }
    :"memh1" is imm_21_27=0b1011011 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & D5 {
        _stub();
    }
    :"memh2" is imm_25_27=0b110 & imm_23_24=0 & imm_21_22=0b01 & S5 & imm_13 & imm_7_12 & imm_0_6 {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"memh3" is imm_27=1 & imm_25_26 & imm_21_24=0b0010 & imm_16_20 & imm_13 & T5 & imm_0_7 {
        _stub();
    }
    :"memh4" is imm_27=1 & imm_25_26 & imm_21_24=0b0011 & imm_16_20 & imm_13 & T5 & imm_0_7 {
        _stub();
    }
}
with slot: iclass=0b1010 {
    :"memh("S5"+#"s11")="T5 is imm_27=0 & imm_25_26 & imm_21_24=0b1010 & S5 & imm_13 & T5 & imm_0_7 [s11 = (imm_0_7 | (imm_13 << 8) | (imm_25_26 << 9)) << 1; ]{
        local EA:4 = S5 + s11;
        *[ram]:2 EA = T5:2;
    }
    :"memh6" is imm_27=0 & imm_25_26 & imm_21_24=0b1011 & imm_16_20 & imm_13 & T5 & imm_0_7 {
        _stub();
    }

    :"memh7" is imm_21_27=0b1001010 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
        _stub();
    }
    :"memh8" is imm_21_27=0b1001010 & S5 & imm_13 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
        _stub();
    }
    :"memh9" is imm_21_27=0b1001011 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
        _stub();
    }
    :"memh10" is imm_21_27=0b1001011 & S5 & imm_13 & T5 & imm_7=0 & imm_3_6 & imm_1=0 & imm_0=0 {
        _stub();
    }

    :"memh11" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_5 {
        _stub();
    }

    :"memh12" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
        _stub();
    }

    :"memh13" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_5 {
        _stub();
    }

    :"memh14" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0 {
        _stub();
    }

    :"memh15" is imm_21_27=0b1101010 & S5 & imm_13 & T5 & imm_7=1 & imm_6 & imm_0_5 {
        _stub();
    }

    :"memh16" is imm_21_27=0b1101010 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
        _stub();
    }

    :"memh17" is imm_21_27=0b1101011 & S5 & imm_13 & T5 & imm_7=1 & imm_6 & imm_0_5 {
        _stub();
    }

    :"memh18" is imm_21_27=0b1101011 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6 {
        _stub();
    }
    :"memh19" is imm_21_27=0b1111010 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6 {
        _stub();
    }
    :"memh20" is imm_21_27=0b1111011 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6 {
        _stub();
    }
}


# ST:Store HW cond
with slot: iclass=0b0011 {
    :"sthwcond00" is imm_21_27=0b0100010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond01" is imm_21_27=0b0100011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond02" is imm_21_27=0b0101010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond03" is imm_21_27=0b0101011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond04" is imm_21_27=0b0110010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond05" is imm_21_27=0b0110011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond06" is imm_21_27=0b0111010 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }
    :"sthwcond07" is imm_21_27=0b0111011 & S5 & imm_13 & T5 & imm_7 & imm_5_6 & D5 {
    _stub();
    }

    :"sthwcond08" is imm_21_27=0b1000001 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
    :"sthwcond09" is imm_21_27=0b1000101 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
    :"sthwcond10" is imm_21_27=0b1001001 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
    :"sthwcond11" is imm_21_27=0b1001101 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_0_4 {
    _stub();
    }
}
with slot: iclass=0b0100 {
    :"sthwcond12" is imm_21_27=0b0000010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }

    :"sthwcond13" is imm_21_27=0b0000011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond14" is imm_21_27=0b0010010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond15" is imm_21_27=0b0010011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond16" is imm_21_27=0b0100010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond17" is imm_21_27=0b0100011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond18" is imm_21_27=0b0110010 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond19" is imm_21_27=0b0110011 & S5 & imm_13 & T5 & imm_3_7 & imm_2=0 & imm_0_1 {
    _stub();
    }
}
with slot: iclass=0b1010 {
    :"sthwcond20" is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond21" is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond22" is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond23" is imm_21_27=0b1011010 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond24" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond25" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond26" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond27" is imm_21_27=0b1011011 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }

    :"sthwcond28" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond29" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond30" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond31" is imm_21_27=0b1111010 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond32" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond33" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
    :"sthwcond34" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
    _stub();
    }
    :"sthwcond35" is imm_21_27=0b1111011 & imm_18_20=0 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
    _stub();
    }
}

# ST:Release
with slot: iclass=0b1010 {
    :"rel0" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b0011 & imm_0_1  {
    _stub();
    }
    :"rel1" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b1011 & imm_0_1  {
    _stub();
    }
}

# ST:Store word
with slot: iclass=0b0011 {
    :"memw("S5"+"T5"<<u2)=T5" is imm_21_27=0b1011100 & S5 & imm_13 & T5 & imm_7 & imm_5_6=0 & imm_0_4 { #  [s11 = (imm_0_7 | (imm_13 << 8) | (imm_16_20 << 9) | (imm_25_26 << 14)) << 2;] {
        #local tmp:2 = s11 << 3;
        #local tmp1:2 = tmp s>> 3;
        #local EA:4 = GP + sext(tmp1);
        #*[ram]:4 EA = T5;
        _stub();
    }
    :"memw("S5"+"U6"=#"S8")" is imm_25_27=0b110 & imm_23_24=0 & imm_21_22=0b10 & S5 & imm_7_12 & imm_0_6 & imm_13 [ U6 = imm_7_12 << 2; S8=imm_0_6 | (imm_13 << 8);] {
        local EA:4 = S5 + U6;
        *[ram]:4 EA = sext(S8:1);

    }
}
with slot: iclass=0b0100 {
    :"memw(gp + "s11")="T5 is imm_27=1 & imm_25_26 & imm_21_24=0b0100 & imm_16_20 & imm_13 & T5 & imm_0_7 [s11 = (imm_0_7 | (imm_13 << 8) | (imm_16_20 << 9) | (imm_25_26 << 14)) << 2;] {
        local tmp:2 = s11 << 3;
        local tmp1:2 = tmp s>> 3;
        local EA:4 = GP + sext(tmp1);
        *[ram]:4 EA = T5;
    }
}
with slot: iclass=0b1010 {
    :"memw("S5" + "s11")="T5 is imm_27=0 & imm_25_26 & imm_21_24=0b1100 & S5 & imm_13 & T5 & imm_0_7 [s11 = (imm_0_7 | (imm_13 << 8) | (imm_25_26 << 9)) << 2;] {
        local tmp:2 = s11 << 3;
        local tmp1:2 = tmp s>> 3;
        local EA:4 = S5 + sext(tmp1);
        *[ram]:4 EA = T5;
    }
    :"memw(X5 ++ I:circ(Mu))="T5 is imm_21_27=0b1001100 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=1 & imm_0=0 {
        _stub();
    }
    :"memw(X5 ++ s4:2:circ(Mu))="T5 is imm_21_27=0b1001100 & S5 & imm_13 & T5 & imm_7=0 & imm_2_6=0 & imm_1=0 & imm_0=0 {
        _stub();
    }
    :"memw(Re=U6)="T5 is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_7=1 & imm_6=0 & imm_0_6  {
        _stub();
    }
    :"memw(Rx++s4:2)="T5 is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_1=0 & imm_0=0  {
        _stub();
    }
    :"memw(Ru<<u2+u6)="T5 is imm_21_27=0b1101100 & imm_16_20 & imm_13 & T5 & imm_7=1 & imm_6 & imm_0_5  {
        _stub();
    }
    :"memw(Rx++Mu)="T5 is imm_21_27=0b1101100 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
        _stub();
    }
    :"memw(Rx++Mu:brev)="T5 is imm_21_27=0b1111100 & S5 & imm_13 & T5 & imm_7=0 & imm_0_6=0 {
        _stub();
    }
}

# ST:Store-release word
with slot: iclass=0b1010 {
    :"memwrl0" is imm_21_27=0b0000101 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b0010 & imm_0_1  {
    _stub();
    }
    :"memwrl1" is imm_21_27=0b0000101 & S5 & imm_13=0 & T5 & imm_6_7=0 & imm_2_5=0b1010 & imm_0_1  {
    _stub();
    }
}

# ST:Store word cond
with slot: iclass=0b0011 {
    :"ST0"D5 is imm_21_27=0b0100100 & S5 & imm_13 & imm_8_12 & imm_7 & D5 {
        _stub();
    }
    :"ST1"D5 is imm_21_27=0b0101100 & S5 & imm_13 & imm_8_12 & imm_7 & D5 {
        _stub();
    }
    :"ST2"D5 is imm_21_27=0b0110100 & S5 & imm_13 & imm_8_12 & imm_7 & D5 {
        _stub();
    }
    :"ST3"D5 is imm_21_27=0b0111100 & S5 & imm_13 & imm_8_12 & imm_7 & D5 {
        _stub();
    }

    :"ST4" is imm_21_27=0b1000010 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_7 & imm_0_4 {
        _stub();
    }
    :"ST5" is imm_21_27=0b1000110 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_7 & imm_0_4 {
        _stub();
    }
    :"ST6" is imm_21_27=0b1001010 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_7 & imm_0_4 {
        _stub();
    }
    :"ST7" is imm_21_27=0b1001110 & S5 & imm_13 & imm_7_12 & imm_5_6 & imm_7 & imm_0_4 {
        _stub();
    }
}
with slot: iclass=0b0100 {
    :"ST8" is imm_21_27=0b0000100 & S5 & imm_13 & T5 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST9" is imm_21_27=0b0010100 & S5 & imm_13 & T5 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST10" is imm_21_27=0b0100100 & S5 & imm_13 & T5 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST11" is imm_21_27=0b0110100 & S5 & imm_13 & T5 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
}

with slot: iclass=0b1010 {
    :"ST12" is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST13" is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=0 & imm_3_6 & imm_2=1 & imm_0_1 {
        _stub();
    }
    :"ST14" is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST15" is imm_21_27=0b1011100 & S5 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
        _stub();
    }

    :"ST16" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST17" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=0 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
        _stub();
    }
    :"ST18" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=0 & imm_0_1 {
        _stub();
    }
    :"ST19" is imm_21_27=0b1111100 & imm_18_20 & imm_16_17 & imm_13=1 & T5 & imm_7=1 & imm_3_6 & imm_2=1 & imm_0_1 {
        _stub();
    }
}

# ST:Allocate stack frame
with slot: iclass=0b1010 {

    :"allocframe("S5","U11"):raw" is imm_21_27=0b0000100 & S5 & imm_11_13=0b000 & imm_0_10 [ U11 = imm_0_10 << 3; ] {
        local EA:4 = S5 - 8;
        *[ram]:8 EA = LRFP;
        FP = EA;
        S5 = EA - U11;
    }
}

#SYSTEM/GUEST:GCRT
with slot: iclass=0b0110 {
    :"gcrt0" is imm_21_27=0b0010000 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
    :"gcrt1" is imm_21_27=0b0011000 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
    :"gcrt3" is imm_21_27=0b1000001 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
    :"gcrt4" is imm_21_27=0b1010001 & S5 & imm_5_13=0 & D5 {
   	_stub();
    }
}


#SYSTEM/MONITOR:Clr int
define pcodeop ciad;
with slot: iclass=0b0110 {
    :"siad("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b011 & imm_0_4=0 {
        ciad(S5);
    }
}

#SYSTEM/MONITOR:Swp sgp
with slot: iclass=0b0110 {
    :"crswap("S5",sgp0)" is imm_21_27=0b0101000 & S5 & imm_0_13=0 {
    _stub();
    }
    :"crswap("S5",sgp1)" is imm_21_27=0b0101001 & S5 & imm_0_13=0 {
    _stub();
    }

    :"crswap("S5_pair",sgp1:0)" is imm_22_27=0b110110 & imm_21=0 & S5_pair & imm_5_13=0 & imm_0_4=0b00000 {
    _stub();
    }
}

#SYSTEM/MONITOR:Cancel pend
define pcodeop cswi;
with slot: iclass=0b0110 {
    :"cswi("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0 {
        ciad(S5);
    }
}

#SYSTEM/MONITOR:Data cache kil
define pcodeop dckill;
slot:"dckill" is iclass=0b1010 & imm_21_27=0b0010000 & imm_16_20=0 & imm_0_13=0 {
	dckill();
}

#SYSTEM/MONITOR:Data cache mon
with slot: iclass=0b1010 {
    :"dcachemon0" is imm_21_27=0b0010001 & S5 & imm_0_13=0 {
    _stub();
    }
    :"dcachemon1" is imm_21_27=0b0010010 & S5 & imm_0_13=0 {
    _stub();
    }
    :"dcachemon2" is imm_21_27=0b0010011 & S5 & imm_0_13=0 {
    _stub();
    }
    :"dcachemon3" is imm_21_27=0b0100000 & S5 & imm_13=0 & T5 & imm_0_7 {
    _stub();
    }
    :"dcachemon4" is imm_21_27=0b0100001 & S5 & T5 & imm_5_13 & D5 {
    _stub();
    }
}

#SYSTEM/MONITOR:Read int mask
define pcodeop getimask;
with slot: iclass=0b0110 {
    :D5"=getimask("S5")" is imm_21_27=0b0110000 & S5 & imm_5_13=0 & D5 {
        D5=getimask(S5);
    }
}

#SYSTEM/MONITOR:Acq hw lck
define pcodeop tlblock;
define pcodeop k0lock;
with slot: iclass=0b0110 {
    :"tlblock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0 {
        tlblock();
    }
    :"k0lock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b011 & imm_0_4=0 {
        k0lock();
    }
}
#SYSTEM/MONITOR:Rel hw lck
define pcodeop tlbunlock;
define pcodeop k0unlock;
with slot: iclass=0b0110 {
    :"tlbunlock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b010 & imm_0_4=0 {
        tlbunlock();
    }
    :"k0unlock" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b100 & imm_0_4=0 {
        k0unlock();
    }
}
#SYSTEM/MONITOR:Int thrd assign rd
define pcodeop iassignr;
with slot: iclass=0b0110 {
    :D5"=iassignr("S5")" is imm_21_27=0b0110011 & S5 & imm_5_13=0 & D5 {
        D5=iassignr(S5);
    }
}
#SYSTEM/MONITOR:Int thrd assign wr
define pcodeop iassignw;
with slot: iclass=0b0110 {
    :"iassignw("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b010 & imm_0_4=0 {
    	#todo
        iassignw(S5);
    }
}

#SYSTEM/MONITOR:icache maintain super
define pcodeop icache_data_read;
define pcodeop icache_tag_read;
define pcodeop icache_inv_idx;
with slot: iclass=0b0101 {
    :D5"=icdatar("S5")" is imm_21_27=0b0101101 & S5 & imm_5_13=0 & D5 {
        icache_data_read(S5);
    }

    :D5"=ictagr("S5")" is imm_21_27=0b0101111 & S5 & imm_5_13=0 & D5 {
        icache_tag_read(S5);
    }

    :"icinvidx("S5")" is imm_21_27=0b0110110 & S5 & imm_11_13=0b001 & imm_0_10=0 {
        icache_inv_idx(S5);
    }
}

#SYSTEM/MONITOR:icache maintain op
define pcodeop ickill;
define pcodeop icache_tag_write;
define pcodeop icache_data_write;
with slot: iclass=0b0101 {
	:"ictagw("S5","T5")" is imm_21_27=0b0101110 & S5 & imm_13=0 & T5 & imm_0_7=0 {
		icache_tag_write(S5, T5);
	}
	:"icdataw("S5","T5")" is imm_21_27=0b0101110 & S5 & imm_13=1 & T5 & imm_0_7=0 {
		icache_data_write(S5, T5);
	}

	:"ickill" is imm_21_27=0b0110110 & imm_16_20=0 & imm_11_13=0b010 & imm_0_10=0 {
		ickill();
	}
}

#SYSTEM/MONITOR:l2 cache op by idx
define pcodeop l2cache_clean_idx;
define pcodeop l2cache_inv_idx;
define pcodeop l2cache_clean_invalidate_idx;
with slot: iclass=0b0101 {
	:"l2cleanidx("S5")" is imm_21_27=0b0110001 & S5 & imm_0_13=0 {
		l2cache_clean_idx(S5);
	}
	:"l2invidx("S5")" is imm_21_27=0b0110010 & S5 & imm_0_13=0 {
		l2cache_inv_idx(S5);
	}
	:"l2cleaninvidx("S5")" is imm_21_27=0b0110011 & S5 & imm_0_13=0 {
		l2cache_clean_invalidate_idx(S5);
	}
}

#SYSTEM/MONITOR:l2 cache gbl op
with slot: iclass=0b1010 {
	:"l2gclean("T5_pair")" is imm_21_27=0b0110101 & imm_16_20=0 & imm_13=0 & T5_pair & imm_0_7=0 {
    _stub();
	}
	:"l2gcleaninv("T5_pair")" is imm_21_27=0b0110110 & imm_16_20=0 & imm_13=0 & T5_pair & imm_0_7=0 {
    _stub();
	}

	:"l2kill" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b000 & imm_0_9=0 {
    _stub();
	}
	:"l2gunlock" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b010 & imm_0_9=0 {
    _stub();
	}
	:"l2gclean" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b100 & imm_0_9=0 {
    _stub();
	}
	:"l2gcleaninv" is imm_21_27=0b1000001 & imm_16_20=0 & imm_13=0 & imm_10_12=0b110 & imm_0_9=0 {
    _stub();
	}
}

#SYSTEM/MONITOR:l2 cache op by addr
with slot: iclass=0b1010 {
	:D2"=l2locka("S5")" is imm_21_27=0b0000111 & S5 & imm_13=1 & imm_2_12=0 & D2 {
    _stub();
	}
	:"l2unlocka("S5")" is imm_21_27=0b0110011 & S5 & imm_0_13=0 {
    _stub();
	}
}

#SYSTEM/MONITOR:l2 tag rw
with slot: iclass=0b1010 {
	:"l2tagw("S5","T5")" is imm_21_27=0b0100010 & S5 & imm_13=0 & T5 & imm_0_7 {
    _stub();
	}
	:D5"=l2tagr("S5")" is imm_21_27=0b0100011 & S5 & imm_5_13=0 & D5 {
    _stub();
	}
}

#SYSTEM/MONITOR:load from phys
with slot: iclass=0b1001 {
	:"memphys" is imm_21_27=0b0010000 & S5 & imm_8_13 & imm_7=0 & imm_5_6=0b00 & D5 {
		_stub();
	}
}

#SYSTEM/MONITOR:nmi
with slot: iclass=0b0110 {
	:"nmi("S5")" is imm_21_27=0b0100011 & S5 & imm_8_13=0 & imm_5_7=0b010 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:resume
with slot: iclass=0b0110 {
	:"resume("S5")" is imm_21_27=0b0100010 & S5 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:ret from except
with slot: iclass=0b0101 {
	:"rte" is imm_21_27=0b0111111 & imm_16_20=0 & imm_12_13=0b00 & imm_8_11=0 & imm_5_7=0b000 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:set int mask
with slot: iclass=0b0110 {
	:"setimask" is imm_21_27=0b0100100 & S5 & imm_10_13=0 & imm_8_9 & imm_5_7=0b000 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:set prio
with slot: iclass=0b0110 {
	:"setprio" is imm_21_27=0b0100100 & S5 & imm_10_13=0 & imm_8_9 & imm_5_7=0b001 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:set int auto dis
with slot: iclass=0b0110 {
	:"siad("S5")" is imm_21_27=0b0100100 & S5 & imm_8_13=0 & imm_5_7=0b011 & imm_0_4=0  {
		_stub();
	}
}

#SYSTEM/MONITOR:Start thread
define pcodeop start;
with slot: iclass=0b0110 {
    :"start("S5")" is imm_21_27=0b0100011 & S5 & imm_8_13=0 & imm_5_7=0b001 & imm_0_4=0 {
        start(S5);
    }
}

#SYSTEM/MONITOR:Stop thread
define pcodeop stop;
with slot: iclass=0b0110 {
    :"stop("S5")" is imm_21_27=0b0100011 & S5 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        stop(S5);
    }
}

#SYSTEM/MONITOR:SWI
define pcodeop swi;
with slot: iclass=0b0110 {
    :"swi("S5")" is imm_21_27=0b0100000 & S5 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        swi(S5);
    }
}

#SYSTEM/MONITOR:TLB
with slot: iclass=0b0110 {
	:"tlbw" is imm_21_27=0b1100000 & S5 & imm_13=0 & T5 & imm_0_7=0  {
		_stub();
	}
	:"tlbr" is imm_21_27=0b1100010 & S5 & imm_5_13=0 & D5 {
		_stub();
	}
	:"tlbp" is imm_21_27=0b1100100 & S5 & imm_5_13=0 & D5 {
		_stub();
	}
	:"tlbinvasid" is imm_21_27=0b1100101 & S5 & imm_5_13=0 & D5 {
		_stub();
	}
	:"ctlbw" is imm_21_27=0b1100110 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
		_stub();
	}
	:"tlboc" is imm_21_27=0b1100111 & S5 & imm_5_13=0 & D5 {
		_stub();
	}
}

#SYSTEM/MONITOR:Control register trans
with slot: iclass=0b0110 {
    :D7_svctrl"="S5 is imm_22_27=0b011100 & imm_21=0 & S5 & imm_7_12=0 & D7_svctrl {
        _stub();
    }
    :"Sdd=Rss" is imm_22_27=0b110100 & imm_21=0 & S5 & imm_7_12=0 & D7_svctrl {
        _stub();
    }
    :D5"="S7_svctrl is imm_23_27=0b11101 & S7_svctrl & imm_5_13=0 & D5 {
        _stub();
    }
    :D5"="S7_svctrl is imm_23_27=0b11110 & S7_svctrl & imm_5_13=0 & D5 {
        _stub();
    }
}

#SYSTEM/MONITOR:Wait mode
define pcodeop wait;
with slot: iclass=0b0110 {
    slot:"wait("S5")" is imm_21_27=0b0100010 & S5 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        wait(S5);
    }
}

define pcodeop isync;
slot:"isync" is iclass=0b0101 & imm_16_27=0b011111000000 & imm_13=0 & imm_10_12=0 & imm_0_9=0b0000000010 {
	isync();
}


# System / monitor
slot:"trans" is iclass=0b0110 & imm_22_27=0b011100 & imm_21=0 & S5 & imm_7_13=0 & D7 {
	_stub();
}





#SYSTEM/USER:Load locked
with slot: iclass=0b1001 {
    slot:"wllck" is imm_21_27=0b0010000 & S5 & imm_12_13=0b00 & imm_5_11=0 & D5 {
_stub();
    }
    slot:"rllck" is imm_21_27=0b0010000 & S5 & imm_12_13=0b01 & imm_5_11=0 & D5 {
_stub();
    }
}

#SYSTEM/USER:Store locked
with slot: iclass=0b1010 {
    slot:"wllckst" is imm_21_27=0b0000101 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2 {
_stub();
    }
    slot:"dllckst" is imm_21_27=0b0000111 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2 {
_stub();
    }
}

#SYSTEM/USER:Zero cache line
define pcodeop dcache_zero_addr;
with slot: iclass=0b1010 {
    slot:"dczeroa("S5")" is imm_21_27=0b0000110 & S5 & imm_13=0 & imm_0_12=0 {
dcache_zero_addr(S5);
    }
}

#SYSTEM/USER:barrier
define pcodeop barrier;
with slot: iclass=0b1010 {
    slot:"barrier" is imm_21_27=0b1000000 & imm_16_20=0 & imm_0_13=0 {
barrier();
    }
}

#SYSTEM/USER:Breakpoint
define pcodeop brkpt;
with slot: iclass=0b0110 {
    slot:"brkpt" is imm_21_27=0b1100001 & imm_16_20=0 & imm_8_13=0 & imm_5_7=0b000 & imm_0_4=0 {
        brkpt();
    }
}

#SYSTEM/USER:Data cache prefetch
define pcodeop dcache_fetch;
with slot: iclass=0b0110 {
    :"dcfetch("S5"+"u11")" is imm_21_27=0b0100000 & S5 & imm_13=0 & imm_11_12=0 & imm_0_10 [u11 = imm_0_10 << 3; ] {
        dcache_fetch();
    }
}

#SYSTEM/USER:Data cache maintain
define pcodeop dcache_clean_addr;
define pcodeop dcache_cleaninv_addr;
define pcodeop dcache_inv_addr;
with slot: iclass=0b1010 {
    :"dccleana("S5")" is imm_21_27=0b0000000 & S5 & imm_0_13=0  {
        dcache_clean_addr(S5);
    }
    :"dccleaninva("S5")" is imm_21_27=0b0000001 & S5 & imm_0_13=0  {
        dcache_cleaninv_addr(S5);
    }
    :"dcinva("S5")" is imm_21_27=0b0000010 & S5 & imm_0_13=0  {
        dcache_inv_addr(S5);
    }
}

#SYSTEM/USER:diag
define pcodeop diag;
define pcodeop diag0;
define pcodeop diag1;
with slot: iclass=0b01100 {
    :"diag("S5")" is imm_21_27=0b0010010 & S5 & imm_8_13=0 & imm_5_7=0b001 &  imm_0_4=0  {
        diag(S5);
    }

    :"diag0("S5","T5")" is imm_21_27=0b0010010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_0_4=0  {
        diag0(S5, T5);
    }
    :"diag1("S5","T5")" is imm_21_27=0b0010010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_0_4=0  {
        diag1(S5, T5);
    }
}

#SYSTEM/USER:Icache maintain
define pcodeop icache_inv_addr;
with slot: iclass=0b1010 {
    :"icinva("S5")" is imm_21_27=0b0110110 & S5 & imm_11_13=0b000 & imm_0_10=0  {
        icache_inv_addr(S5);
    }
}


#SYSTEM/USER:Isync
define pcodeop memory_synch;
with slot: iclass=0b0101 {
    :"isync" is imm_17_27=0b011111000000 & S5 & imm_13=0 & imm_10_12=0 & imm_0_9=0b0000000010  {
        memory_synch(S5);
    }
}

#SYSTEM/USER:L2 fetch todo
define pcodeop l2fetch;
with slot: iclass=0b1010 {
    :"l2fetch("S5","T5")" is imm_21_27=0b0110000 & S5 & imm_13=0 & T5 & imm_0_7=0 {
        l2fetch(S5, T5);
    }
    :"l2fetch("S5","T5_pair")" is imm_21_27=0b0110100 & S5 & imm_13=0 & T5_pair & imm_0_7=0 {
        l2fetch(S5, T5_pair);
    }
}


#SYSTEM/USER:pause
define pcodeop pause;
with slot: iclass=0b0101 {
    :"pause" is imm_22_27=0b010001 & imm_16_21=0 & imm_13=0 & imm_8_12 & imm_5_7=0 & imm_2_4 & imm_0_1=0  {
        pause();
    }
}

#SYSTEM/USER:mem thread sync
define pcodeop syncht;
with slot: iclass=0b1010 {
    :"Rd=dmsyncht" is imm_21_27=0b1000000 & imm_16_20=0 & imm_9_13=0 & imm_5_8=0b0111 & D5 {
	    _stub();
    }

    :"syncht" is imm_21_27=0b1000010 & imm_16_20=0 & imm_0_13=0 {
        syncht();
    }
}

#SYSTEM/USER:trace
define pcodeop trace;
with slot: iclass=0b0110 {
    :"trace" is imm_21_27=0b0010010 & S5 & imm_0_13=0 {
        trace(S5);
    }
}

#SYSTEM/USER:Trap
define pcodeop trap0;
define pcodeop trap1;
with slot: iclass=0b0101 {
    slot:"trap0" is imm_22_27=0b010000 & imm_16_21=0 & imm_13=0 & imm_8_12 & imm_5_7 & imm_2_4 & imm_0_1 {
        trap0();
    }
    slot:"trap1" is imm_22_27=0b010010 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7 & imm_2_4 & imm_0_1 {
        trap1();
    }
}

#SYSTEM/USER:unpause
define pcodeop unpause;
with slot: iclass=0b0101 {
    :"unpause" is imm_21_27=0b0111111 & imm_16_20=0 & imm_12_13=0b01 & imm_8_11=0 & imm_5_7=0b000 & imm_0_4=0 {
        unpause();
    }
}

# XTYPE - pain starts here
# XTYPE/ALU

# XTYPE/ALU:Abs dword
with slot: iclass=0b1000 {
    :"=absdword" is imm_21_27=0b0000100 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Abs word
with slot: iclass=0b1000 {
    :"=absword" is imm_21_27=0b1100100 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"=abswordsat" is imm_21_27=0b1100100 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Add acc
with slot: iclass=0b1101 {
    :"=add0" is imm_23_27=0b10110 & imm_21_22 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_0_4 {
    _stub();
    }
    :"=add1" is imm_23_27=0b10111 & imm_21_22 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_0_4 {
    _stub();
    }
}
with slot: iclass=0b1110 {
    :"+=add2" is imm_23_27=0b00100 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12 & imm_0_4 {
        _stub();
    }
    :D5"-=add("S5",#"imm_5_12")" is imm_23_27=0b00101 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12 & D5 {
        local tmp:4 = S5+imm_5_12;
        D5 = D5 - tmp;
    }

    :"+=add4" is imm_21_27=0b1111000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & imm_0_4 {
        _stub();
    }
    :"-=add5" is imm_21_27=0b1111100 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & imm_0_4 {
        _stub();
    }
}
# XTYPE/ALU:Add dword
with slot: iclass=0b1101 {
    :"=addd0" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :"=addd1" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"=addd2" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"=addd3" is imm_21_27=0b0011011 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :"=addd4" is imm_21_27=0b0101100 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Add hword
with slot: iclass=0b1101 {
    :"=addhw00" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
    :"=addhw01" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"=addhw02" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"=addhw03" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
    :"=addhw04" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"=addhw05" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"=addhw06" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"=addhw07" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"=addhw08" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"=addhw09" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"=addhw10" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Add or sub dword w/ cary
with slot: iclass=0b1100 {
    :"=addcarry0" is imm_21_27=0b0010110 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
    _stub();
    }
    :"=addcarry1" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
    _stub();
    }
}

# XTYPE/ALU:Clip unsign
with slot: iclass=0b1000 {
    :"=clip" is imm_21_27=0b1000110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:logical dword
with slot: iclass=0b1000 {
    :"=notd" is imm_21_27=0b0000100 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
}
with slot: iclass=0b1101 {
    :"=and" is imm_21_27=0b0011111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"=andn" is imm_21_27=0b0011111 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"=or" is imm_21_27=0b0011111 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"=orn" is imm_21_27=0b0011111 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"=xor" is imm_21_27=0b0011111 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
}

# XTYPE/ALU:logical logical dword
with slot: iclass=0b1100 {
    :"=xorxacc" is imm_22_27=0b101010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
}

# XTYPE/ALU:logical logical word
with slot: iclass=0b1101 {
    :"|=and" is imm_22_27=0b101000 & imm_21 & S5 & imm_5_13 & imm_0_4  {
    _stub();
    }
    :"or(and)" is imm_22_27=0b101001 & imm_21 & S5 & imm_5_13 & imm_0_4  {
    _stub();
    }
    :"|=or()" is imm_22_27=0b101010 & imm_21 & S5 & imm_5_13 & imm_0_4  {
    _stub();
    }
}
with slot: iclass=0b1110 {
    :"|=and" is imm_21_27=0b1111001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5  {
    _stub();
    }
    :"&=and" is imm_21_27=0b1111001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5  {
    _stub();
    }
    :"^=and" is imm_21_27=0b1111001 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5  {
    _stub();
    }

    :"&=and" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5  {
    _stub();
    }
    :"&=or" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5  {
    _stub();
    }
    :"&=xor" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5  {
    _stub();
    }
    :"|=and" is imm_21_27=0b1111010 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5  {
    _stub();
    }
    :"^=xor" is imm_21_27=0b1111100 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5  {
    _stub();
    }
    :"|=or" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5  {
    _stub();
    }
    :"|=xor" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5  {
    _stub();
    }
    :"^=and" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5  {
    _stub();
    }
    :"^=or" is imm_21_27=0b1111110 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5  {
    _stub();
    }

}

# XTYPE/ALU:max word
with slot: iclass=0b1101 {
    :"maxw0" is imm_21_27=0b0101110 & S5 & imm_13=0  & imm_7=0 & imm_5_6=0 & D5 {
    _stub();
    }
    :"maxw1" is imm_21_27=0b0101110 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:max dword
with slot: iclass=0b1101 {
    :"maxd0" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"maxd1" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:min word
with slot: iclass=0b1101 {
    :"minw0" is imm_21_27=0b0101101 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0 & D5 {
    _stub();
    }
    :"minw1" is imm_21_27=0b0101101 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:min dword
with slot: iclass=0b1101 {
    :"maxd0" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"maxd1" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:mod wrap
with slot: iclass=0b1101 {
    :"modw" is imm_21_27=0b0011111 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:neg
with slot: iclass=0b1000 {
    :"neg0" is imm_21_27=0b0000100 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"neg1" is imm_21_27=0b1100100 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:round
with slot: iclass=0b1000 {
    :"rnd0" is imm_21_27=0b1000110 & S5 & imm_8_13=0 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"rnd1" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd2" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd3" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd4" is imm_21_27=0b1000111 & S5 & imm_8_13 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
}
with slot: iclass=0b1100 {
    :"rnd5" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd6" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd7" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"rnd8" is imm_22_27=0b011011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:sub dword
with slot: iclass=0b1101 {
    :"subd" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :"subd" is imm_21_27=0b0101100 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:sub dword
with slot: iclass=0b1110 {
    :"subacc" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
}

# XTYPE/ALU:sub hword
with slot: iclass=0b1101 {
    :"subhw00" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw01" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw02" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw03" is imm_21_27=0b0101001 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    _stub();
    }
    :"subhw04" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"subhw05" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"subhw06" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"subhw07" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"subhw08" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"subhw09" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"subhw10" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"subhw11" is imm_21_27=0b0101011 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:sext w->dw
with slot: iclass=0b1000 {
    :"sextwdw" is imm_22_27=0b010001 & imm_21=0 & S5 & imm_8_13=0 & imm_6_7=0b00 & imm_5=0 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs val hw
with slot: iclass=0b1000 {
    :"vabsh" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"vabshsat" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs val w
with slot: iclass=0b1000 {
    :"vabsw" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"vabswsat" is imm_21_27=0b0000010 & S5 & imm_8_13=0 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs diff hw
with slot: iclass=0b1110 {
    :"vabsdiffh" is imm_21_27=0b1000011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector abs diff w
with slot: iclass=0b1110 {
    :"vabsdiffw" is imm_21_27=0b1000001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector add hw
with slot: iclass=0b1101 {
    :"vaddh" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vaddhsat" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vadduhsat" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector add hw w sat and pck uby
with slot: iclass=0b1100 {
    :"vaddhub" is imm_22_27=0b000101 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add u by
with slot: iclass=0b1110 {
    :"vraddub" is imm_21_27=0b1000010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"rxx=vraddub" is imm_21_27=0b1010010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add hw
with slot: iclass=0b1110 {
    :"vradduh" is imm_23_27=0b10010 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6=0b01 & D5 {
    _stub();
    }
    :"vraddh" is imm_23_27=0b10010 & imm_22=0 & imm_21=1 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add by
with slot: iclass=0b1101 {
    :"vraddub" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vraddub" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red add w
with slot: iclass=0b1101 {
    :"vraddw" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vraddwsat" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector avg hw TODO

# XTYPE/ALU:vector avg u by
with slot: iclass=0b1101 {
    :"vavgub" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vavgubrnd" is imm_21_27=0b0011010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector avg w TODO

# XTYPE/ALU:vector cond neg
with slot: iclass=0b1100 {
    :"vcnegh" is imm_22_27=0b001111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    _stub();
    }
    :"vrcnegh" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector max by
with slot: iclass=0b1101 {
    :"vmaxub" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vmaxb" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector max hw
with slot: iclass=0b1101 {
    :"vmaxh" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vmaxuh" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red max hw
with slot: iclass=0b1100 {
    :"vrmaxh" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vrmaxuh" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red max w
with slot: iclass=0b1100 {
    :"vrmaxw" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vrmaxuw" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector max w
with slot: iclass=0b1101 {
    :"vmaxuw" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vmaxw" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector min b
with slot: iclass=0b1101 {
    :"vminub" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vminb" is imm_21_27=0b0011110 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector min hw
with slot: iclass=0b1101 {
    :"vminh" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
    :"vminuh" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red min hw
with slot: iclass=0b1100 {
    :"vrminh" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vrminuh" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector red min w
with slot: iclass=0b1100 {
    :"vrminw" is imm_21_27=0b1011001 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"vrminuw" is imm_21_27=0b1011001 & S5 & imm_13=1 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector min w
with slot: iclass=0b1101 {
    :"vminw" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vminuw" is imm_21_27=0b0011101 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector sum abs diff
with slot: iclass=0b1110 {
    :"vrsadub" is imm_21_27=0b1000010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"+vrsadub" is imm_21_27=0b1010010 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector sub hw
with slot: iclass=0b1101 {
    :"vsubh" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"vsubhsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & D5 {
    _stub();
    }
    :"vsubuhsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }
}

# XTYPE/ALU:vector sub by
with slot: iclass=0b1101 {
    :"vsubub" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"vsububsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
    _stub();
    }
}


# XTYPE/ALU:vector sub w
with slot: iclass=0b1101 {
    :"vsubw" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"vsubwsat" is imm_21_27=0b0011001 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}


# XTYPE/ALU:vector add cmp and select
with slot: iclass=0b1110 {
    :"vacsh" is imm_21_27=0b1010101 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
    _stub();
    }
}



# XTYPE/BIT:Count leading
with slot: iclass=0b1000 {
    :"clb" is imm_21_27=0b1000010 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
    _stub();
    }
    :"cl0" is imm_21_27=0b1000010 & S5 & imm_8_13=0 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"cl1" is imm_21_27=0b1000010 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"normamt" is imm_21_27=0b1000011 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
    _stub();
    }

    :"addclb" is imm_21_27=0b1000011 & S5 & imm_8_13 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"addclb1" is imm_21_27=0b1100001 & S5 & imm_8_13 & imm_5_7=0b000 & D5 {
    _stub();
    }

    :"clb0" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"cl0" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :"cl1" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :"normamt2" is imm_21_27=0b1100000 & S5 & imm_8_13=0 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/BIT:Count pop
with slot: iclass=0b1000 {
    :"popcnt" is imm_21_27=0b1000011 & S5 & imm_8_13=0 & imm_5_7=0b011 & D5 {
    _stub();
    }
}

# XTYPE/BIT:Count trail
with slot: iclass=0b1000 {
    :"ct0" is imm_21_27=0b1000111 & S5 & imm_8_13=0 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :"ct1" is imm_21_27=0b1000111 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"ct01" is imm_21_27=0b1100010 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
    _stub();
    }
    :"ct11" is imm_21_27=0b1100010 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
    _stub();
    }
}

# XTYPE/BIT:Extract bit
with slot: iclass=0b1000 {
    :"extu0" is imm_24_27=0b0001 & imm_21_23 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"extu1" is imm_24_27=0b1010 & imm_21_23 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"extu2" is imm_24_27=0b1101 & imm_23=0 & imm_21_22 & S5 & imm_13=0 & imm_8_12 & imm_5_7 & D5 {
_stub();
    }
    :"extu3" is imm_24_27=0b1101 & imm_23=1 & imm_21_22 & S5 & imm_13=0 & imm_8_12 & imm_5_7 & D5 {
_stub();
    }
}
with slot: iclass=0b1100 {
    :"extu4" is imm_22_27=0b000100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
_stub();
    }
    :"extu5" is imm_22_27=0b000111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
_stub();
    }
    :"extu6" is imm_22_27=0b100100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
_stub();
    }
    :"extu7" is imm_22_27=0b100100 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:Insert bit
with slot: iclass=0b1000 {
    :D5"ins0" is imm_24_27=0b0011 & imm_21_23 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :D5"ins1" is imm_23_27=0b11110 & imm_21_22 & S5 & imm_13=0 & imm_8_12 & imm_5_7 & D5 {
_stub();
    }
}

with slot: iclass=0b1100 {
    :D5"ins2" is imm_24_27=0b1000 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
    :D5"ins3" is imm_23_27=0b10100 & imm_21_22=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:Interleave
with slot: iclass=0b1000 {
    :"intlve0" is imm_21_27=0b0000110 & S5 & imm_8_13=0 & imm_5_7=0b100 & D5 {
_stub();
    }
    :"intlve1" is imm_21_27=0b0000110 & S5 & imm_8_13=0 & imm_5_7=0b101 & D5 {
_stub();
    }
}

# XTYPE/BIT:Linear feedback
with slot: iclass=0b1100 {
    :"lfs" is imm_22_27=0b000110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
_stub();
    }
}

# XTYPE/BIT:Masked parity
with slot: iclass=0b1101 {
    :"par0" is imm_24_27=0b0000 & imm_21_23=0 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
    :"par1" is imm_21_27=0b0101111 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:Bit rev
with slot: iclass=0b1000 {
    :"brev" is imm_21_27=0b0000110 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
_stub();
    }
    :"brev" is imm_21_27=0b1100010 & S5 & imm_8_13=0 & imm_5_7=0b110 & D5 {
_stub();
    }
}

# XTYPE/BIT:Set clear toggle big
with slot: iclass=0b1000 {
    :D5"=setbit("S5",#"imm_8_12")" is imm_21_27=0b1100110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
       D5 = S5 | (1 << imm_8_12);
    }
    :D5"=clrbit("S5",#"imm_8_12")" is imm_21_27=0b1100110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
       D5 = S5 & ~(1 << imm_8_12);
    }
    :"togglebit()" is imm_21_27=0b1100110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
	    _stub();
    }
}
with slot: iclass=0b1100 {
    :"setbit1()" is imm_22_27=0b011010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
	    _stub();
    }
    :"clrbit1()" is imm_22_27=0b011010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
	    _stub();
    }
    :"tglbit2()" is imm_22_27=0b011010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
	    _stub();
    }
}

# XTYPE/BIT:split Bf
with slot: iclass=0b1000 {
    :"bitsplit" is imm_21_27=0b1000110 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b100 & D5 {
_stub();
    }
}
with slot: iclass=0b1001 {
    :"bitsplit" is imm_24_27=0b0100 & imm_22_23=0 & imm_21=1 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0 & D5 {
_stub();
    }
}

# XTYPE/BIT:TI
with slot: iclass=0b1000 {
    :"tableidxb" is imm_22_27=0b011100 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"tableidxh" is imm_22_27=0b011101 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"tableidxw" is imm_22_27=0b011110 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
    :"tableidxd" is imm_22_27=0b011111 & imm_21 & S5 & imm_8_13 & imm_5_7 & D5 {
_stub();
    }
}

# XTYPE/Complex

# XTYPE/FP: fp add
with slot: iclass=0b1110 {
    :"fpadd" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
}

# XTYPE/FP: fp class
with slot: iclass=0b1000 {
    :"fpclass0" is imm_21_27=0b0101111 & S5 & imm_13=0 & imm_8_12 & imm_1_7=0 & D2 {
        _stub();
    }
}
with slot: iclass=0b1101 {
    :"fpclass1" is imm_21_27=0b1100100 & S5 & imm_13=0 & imm_10_12=0 & imm_5_9 & imm_3_4=0b10 & imm_2=0 & D2 {
        _stub();
    }
}

# XTYPE/FP: fp cmp
with slot: iclass=0b1100 {
    :"fpcmp00" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp01" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp02" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp03" is imm_21_27=0b0111111 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2 {
        _stub();
    }
}
with slot: iclass=0b1101 {
    :"fpcmp04" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp05" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp06" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_2_4=0 & D2 {
        _stub();
    }
    :"fpcmp07" is imm_21_27=0b0010111 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
        _stub();
    }
}

# XTYPE/FP: fp conv to other
define pcodeop convert_sf2df;
with slot: iclass=0b1000 {
    :D5_pair"=convert_sf2df("S5")" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5_pair {
        D5_pair = convert_sf2df(S5);
    }
    :D5"=convert_sf2df("S5_pair")" is imm_21_27=0b1000000 & S5_pair & imm_8_13=0 & imm_5_7=0b001 & D5 {
        D5 = convert_sf2df(S5_pair);
    }
}

# XTYPE/FP: conv int to fp
with slot: iclass=0b1000 {
    :"fpconvifp01" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"fpconvifp02" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"fpconvifp03" is imm_23_27=0b01001 & imm_21_22=0 S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"fpconvifp04" is imm_23_27=0b01001 & imm_21_22=0 S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b010 & D5 {
        _stub();
    }
    :"fpconvifp05" is imm_21_27=0b1000001 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"fpconvifp06" is imm_21_27=0b1000010 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"fpconvifp07" is imm_21_27=0b1011001 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"fpconvifp08" is imm_21_27=0b1011010 & S5 & imm_13=0 & imm_8_12=0  & imm_5_7=0b000 & D5 {
        _stub();
    }
}

# XTYPE/FP: conv fp val to int
with slot: iclass=0b1000 {
    :"=fpconvint00("S5")" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpconvint01("S5")" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint02("S5")" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"=fpconvint03("S5")" is imm_21_27=0b0000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b111 & D5 {
        _stub();
    }

    :"=fpconvint04("S5")" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b011 & D5 {
        _stub();
    }
    :"=fpconvint05("S5")" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"=fpconvint06("S5")" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b101 & D5 {
        _stub();
    }
    :"=fpconvint07("S5")" is imm_23_27=0b01001 & imm_21_22=0 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b110 & D5 {
        _stub();
    }

    :"=fpconvint08("S5")" is imm_21_27=0b1000011 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint09("S5")" is imm_21_27=0b1000100 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint10("S5")" is imm_21_27=0b1000101 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint11("S5")" is imm_21_27=0b1000111 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }

    :"=fpconvint12("S5")" is imm_21_27=0b1011011 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpconvint13("S5")" is imm_21_27=0b1011011 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
    :"=fpconvint14("S5")" is imm_21_27=0b1011100 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpconvint15("S5")" is imm_21_27=0b1011100 & S5 & imm_13=0 & imm_8_12=0 & imm_5_7=0b001 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp extreame value
with slot: iclass=0b1000 {
    :"=fpext00" is imm_21_27=0b1011101 & S5 & imm_8_13=0 & imm_5_7=0b000 & D5 {
        _stub();
    }
}
with slot: iclass=0b1110 {
    :"=fpext01" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        _stub();
    }
    :"=fpext02" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp fma
with slot: iclass=0b1110 {
    :"=fpfma00" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
        _stub();
    }
    :"=fpfma01" is imm_21_27=0b1111000 & S5 & imm13=0 & T5 &  imm_5_7=0b101 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp fma scale
with slot: iclass=0b1110 {
    :"=fpfmas00" is imm_21_27=0b1111011 & S5 & imm_13=0 & T5 & imm_7=1 & imm_5_6 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp repic
with slot: iclass=0b1000 {
    :"=fprecip" is imm_21_27=0b1011111 & S5 & imm_8_13=0 & imm_7=0 & imm_5_6 & D5 {
        _stub();
    }
}

# XTYPE/FP: xtype fp fma lib
with slot: iclass=0b1110 {
    :"=fpfmalib00" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
        _stub();
    }
    :"=fpfmalib01" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
        _stub();
    }
}
# XTYPE/FP: xtype fp mk const

# XTYPE/MPY
# XTYPE/MPY: Mul and use lower
with slot: iclass=0b1101 {
    :D5"=add(u6,mpyi)" is imm_23_27=0b01110 & imm_21_22 & S5 & imm_13 & T5 & imm_5_7 & D5 {
    _stub();
    }

    :"add(u6,mpyi)" is imm_24_27=0b1000 & imm_23 & imm_21_22 & S5 & imm_13 & T5 & imm_5_7 & imm_0_4 {
    _stub();
    }

    :T5"=add("D5",mpyi("u6","S5")" is imm_23_27=0b11110 & imm_21_22 & S5 & imm_13 & T5 & imm_5_7 & D5 [ u6 = (imm_5_7 | (imm_13 << 3) | (imm_21_22 << 4)) << 2; ] {
        local tmp:8 = u6;
        local tmp1:8 = sext(S5) * tmp;
        T5 = D5 + tmp1:4;
    }
    :D5"=add(mpyi0("S5",)" is imm_23_27=0b11111 & imm_21_22 & S5 & imm_13 & T5 & imm_5_7 & D5 {
    _stub();
    }
}
with slot: iclass=0b1110 {
    :D5"=add(mpyi("S5",)" is imm_21_27=0b0011000 & S5 & imm_13=0 & T5 & imm_5_7=0 & D5 {
    _stub();
    }
    :D5"=+mpyi("S5","imm_5_12")" is imm_23_27=0b00000 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12 & D5 {
        local tmp:8 = imm_5_12;
        local tmp1:8 = sext(S5) * tmp;
        S5 = tmp1:4; 
    }
    :D5"=-mpyi("S5",)" is imm_23_27=0b00001 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12 & D5 {
    _stub();
    }

    :D5"+=mpyi("S5",)" is imm_23_27=0b00010 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12 & D5 {
    _stub();
    }
    :D5"-=mpyi("S5",)" is imm_23_27=0b00011 & imm_21_22=0 & S5 & imm_13=0 & imm_5_12 & D5 {
    _stub();
    }
    :D5"=mpyi("S5","T5")" is imm_21_27=0b1101000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        local tmp:8 = sext(S5)*sext(T5);
        local tmp2:8 = sext(D5) + tmp;
        D5 = tmp2:4;
    }
    :D5"+=mpyi("S5","T5")" is imm_21_27=0b1111000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        local tmp:8 = sext(S5)*sext(T5);
        local tmp2:8 = sext(D5) + tmp;
        D5 = tmp2:4;
    }
    :D5"-=mpyi("S5","T5")" is imm_21_27=0b1111100 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
        local tmp:8 = sext(S5)*sext(T5);
        local tmp2:8 = sext(D5) - tmp;
        D5 = tmp2:4;
    }
}

# XTYPE/MPY: vec mul w by sign
with slot: iclass=0b1110 {
    :D5"vmpyweh00" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweh01" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :D5"vmpyweh02" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweh03" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :D5"vmpyweh04" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweh05" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b00 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :D5"vmpyweh06" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweh07" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Mul by unsign
with slot: iclass=0b1110 {
    :D5"vmpyweuh00" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweuh01" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :D5"vmpyweuh02" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweuh03" is imm_24_27=0b1000 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }

    :D5"vmpyweuh04" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweuh05" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :D5"vmpyweuh06" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & D5 {
    _stub();
    }
    :D5"vmpyweuh07" is imm_24_27=0b1010 & imm_23 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Mul signed hw TODO
# XTYPE/MPY: Mul usigned hw TODO

# XTYPE/MPY: Poly mul w
with slot: iclass=0b1110 {
    :D5"pmpyw" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
    :D5"^pmpyw" is imm_21_27=0b0111001 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Vec red mul w
with slot: iclass=0b1110 {
    :D5"vrmpywoh" is imm_24_27=0b1000 & imm_21 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    _stub();
    }
    :D5"vrmpyweh" is imm_24_27=0b1000 & imm_21 & imm_21_22=0b10 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
    _stub();
    }

    :D5"+vrmpyweh" is imm_24_27=0b1010 & imm_21 & imm_21_22=0b01 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
    :D5"+vrmpywoh" is imm_24_27=0b1010 & imm_21 & imm_21_22=0b11 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & D5 {
    _stub();
    }
}

# XTYPE/MPY: Mul and use upper
with slot: iclass=0b1110 {
    :"mpy0" is imm_21_27=0b1101001 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"mpy1" is imm_21_27=0b1101010 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"mpy2" is imm_21_27=0b1101011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"mpy3" is imm_21_27=0b1101101 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy4" is imm_21_27=0b1101101 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
    :"mpy5" is imm_21_27=0b1101101 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"mpy6" is imm_21_27=0b1101111 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy7" is imm_21_27=0b1101111 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"mpy8" is imm_24_27=0b1101 & imm_23 & imm_22=0 & imm_21 & S5 & imm_13=0 & T5 & imm_7=0 & imm_5_6 & D5 {
       _stub();
    }

    :"mpy9" is imm_21_27=0b1111011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy10" is imm_21_27=0b1111011 & S5 & imm_13=0 & T5 & imm_5_7=0b001 & D5 {
       _stub();
    }
}

# XTYPE/MPY: Mul and use full
with slot: iclass=0b1110 {
    :D5_pair"=mpy("S5","T5")" is imm_21_27=0b0101000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5_pair {
        local tmp:8 = sext(S5)*sext(T5);
        D5_pair = tmp;
    }
    :D5_pair"=mpyu("S5","T5")" is imm_21_27=0b0101010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5_pair {
        local tmp:8 = zext(S5)*zext(T5);
        D5_pair = tmp;
    }

    :"mpy11" is imm_21_27=0b0111000 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy12" is imm_21_27=0b0111001 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy13" is imm_21_27=0b0111010 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"mpy14" is imm_21_27=0b0111011 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & D5 {
       _stub();
    }
}
# XTYPE/MPY: Vec dual mul
# XTYPE/MPY: Vec dual mul w round
# XTYPE/MPY: Vec red mulp by


# XTYPE/PERM
# XTYPE/PERM:CABAC
with slot: iclass=0b1100 {
    :"decbin" is imm_22_27=0b000111 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
       _stub();
    }
}

# XTYPE/PERM:sat
with slot: iclass=0b1000 {
    :"sat00" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b000 & D5 {
       _stub();
    }
    :"sat01" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b100 & D5 {
       _stub();
    }
    :"sat02" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b101 & D5 {
       _stub();
    }
    :"sat03" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b110 & D5 {
       _stub();
    }
    :"sat04" is imm_21_27=0b1000110 & S5 & imm_8_13 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/PERM:swz
with slot: iclass=0b1000 {
    :"swz" is imm_21_27=0b1100100 & S5 & imm_8_13 & imm_5_7=0b111 & D5 {
       _stub();
    }
}

# XTYPE/PRED:bound chk
with slot: iclass=0b1101 {
    :"bc0" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2 {
       _stub();
    }
    :"bc1" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b101 & imm_2_4=0 & D2 {
       _stub();
    }
}

# XTYPE/PRED:cmp byte
with slot: iclass=0b1100 {
    :"cmpb0" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmpb1" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b110 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmpb2" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b111 & imm_2_4=0 & D2 {
       _stub();
    }
}
with slot: iclass=0b1101 {
    :"cmpb3" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b00 & imm_2=0 & D2 {
       _stub();
    }
    :"cmpb4" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b00 & imm_2=0 & D2 {
       _stub();
    }
    :"cmpb5" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b00 & imm_2=0 & D2 {
       _stub();
    }
}

# XTYPE/PRED:cmp half
with slot: iclass=0b1100 {
    :"cmph0" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmph1" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmph2" is imm_21_27=0b0111110 & S5 & imm_13=0 & T5 & imm_5_7=0b101 & imm_2_4=0 & D2 {
       _stub();
    }
}
with slot: iclass=0b1101 {
    :"cmph3" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b00 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b01 & imm_2=0 & D2 {
       _stub();
    }
    :"cmph4" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b01 & S5 & imm_13=0 & imm_5_12 & imm_3_4=0b01 & imm_2=0 & D2 {
       _stub();
    }
    :"cmph5" is imm_24_27=0b1101 & imm_23=0 & imm_21_22=0b10 & S5 & imm_13=0 & imm_12=0 & imm_5_11 & imm_3_4=0b01 & imm_2=0 & D2 {
       _stub();
    }
}

# XTYPE/PRED:cmp dword
with slot: iclass=0b1101 {
    :"cmpw0" is imm_21_27=0b0010100 & S5 & imm_13=0 & T5 & imm_5_7=0b000 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmpw1" is imm_21_27=0b0010100 & S5 & imm_13=0 & T5 & imm_5_7=0b010 & imm_2_4=0 & D2 {
       _stub();
    }
    :"cmpw2" is imm_21_27=0b0010100 & S5 & imm_13=0 & T5 & imm_5_7=0b100 & imm_2_4=0 & D2 {
       _stub();
    }
}
# XTYPE/PRED:cmp mask
with slot: iclass=0b1000 {
    :D2_pred_new"=bitsclr("S5",#"imm_8_13")" is imm_21_27=0b0101100 & S5 & imm_8_13 & imm_2_7=0 & D2_pred_new {
    local tmp:4 = S5 & imm_8_13;
    if(tmp == 0) goto <good>;
    D2_pred_new = 0x0;
    goto inst_next;
    <good>
    D2_pred_new = 0xff;
    goto inst_next;
    }
    :"bitsclr1" is imm_21_27=0b0101101 & S5 & imm_8_13 & imm_2_7=0 & D2_pred {
    _stub();
    }
}
with slot: iclass=0b1100 {
    :"bitsclr2" is imm_21_27=0b0111010 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred {
    _stub();
    }
    :"bitsclr3" is imm_21_27=0b0111011 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred {
    _stub();
    }
    :"bitsclr4" is imm_21_27=0b0111100 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred {
    _stub();
    }
    :"bitsclr5" is imm_21_27=0b0111101 & S5 & imm_13=0 & T5 & imm_2_7=0 & D2_pred {
    _stub();
    }
}

# XTYPE/PRED:Pred mask gen
with slot: iclass=0b1000 {
    :"genmsk" is imm_24_27=0b0110 & imm_16_23=0 & imm_10_13=0 & imm_8_9 & imm_5_7=0 & D5 {
       _stub();
    }
}

# XTYPE/PRED:Pred tlb match
with slot: iclass=0b1101 {
    :"genmsk" is imm_23_27=0b00100 & imm_21_22=0 & S5 & imm_13=1 & T5 & imm_5_7=0b011 & imm_2_4=0 & D2 {
       _stub();
    }
}

# XTYPE/PRED:Pred trans
with slot: iclass=0b1000 {
    :D2_pred"="S5 is imm_21_27=0b0101010 & S5 & imm_2_13=0 & D2_pred {
       D2_pred=S5;
    }
    :D5"="S2_pred is imm_24_27=0b1001 & imm_23=0 & imm_22=1 & imm_18_21=0 & S2_pred & imm_5_13=0 & D5 {
       D5=S2_pred;
    }
}

# XTYPE/PRED:test bit
with slot: iclass=0b1000 {
    :D2_pred_new"=tstbit("S5",#"imm_8_12")" is imm_21_27=0b0101000 & S5 & imm_13=0 & imm_8_12 & imm_2_7=0 & D2_pred_new {
        local tmp:4 = 1 << imm_8_12;
        local tmp1:4 = S5 & tmp;
        if(tmp1 != 0) goto <good>;
        D2_pred_new = 0;
        goto inst_next;
        <good>
        D2_pred_new = 0xff;
        goto inst_next;
    }
    :"tstbit1" is imm_21_27=0b0101001 & S5 & imm_13=0 & imm_8_12 & imm_2_7=0 & D2_pred {
        _stub();
    }
}
with slot: iclass=0b1100 {
    :"tstbit2" is imm_21_27=0b0111000 & S5 & imm_13=0 & imm_8_12 & imm_2_7=0 & D2_pred {
        _stub();
    }
    :"tstbit3" is imm_21_27=0b0111001 & S5 & imm_13=0 & imm_8_12 & imm_2_7=0 & D2_pred {
        _stub();
    }
}
# XTYPE/PRED:vec cmp hw
# XTYPE/PRED:vec cmp by for
# XTYPE/PRED:vec cmp by
# XTYPE/PRED:vec cmp w
# XTYPE/PRED:vec cmp e v od
# XTYPE/PRED:vec pck evn odd
# XTYPE/PRED:vec mux

# XTYPE/SHIFT:Mask from imm
# XTYPE/SHIFT:Shift by imm
with slot: iclass=0b1000 {
    :D5_pair"=asr("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b000 & D5_pair {
       _stub();
    }
    :D5_pair"=lsr("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b001 & D5_pair {
       _stub();
    }
    :D5_pair"=asl("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b010 & D5_pair {
       _stub();
    }
    :D5_pair"=rol("S5_pair",#"imm_8_13")" is imm_21_27=0b0000000 & S5_pair & imm_8_13 & imm_5_7=0b011 & D5_pair {
       _stub();
    }
    :D5"=asr("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
        D5 = S5 s>> imm_8_12;
    }
    :D5"=lsr("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
        D5 = S5 >> imm_8_12;
    }
    :D5"=asl("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
        D5 = S5 << imm_8_12;
    }
    :D5"=rol("S5",#"imm_8_12")" is imm_21_27=0b1100000 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b011 & D5 {
    _stub();
    }
}

# XTYPE/SHIFT:Shift by imm and acc
with slot: iclass=0b1000 {
    :"rxx-=asr(rss,u6)" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b000 & D5 {
    	_stub();
    }
    :"rxx-=lsr(rss,u6)" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"rxx-=asl(rss,u6)" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b010 & D5 {
    	_stub();
    }
    :"rxx+=asr(rss,u6)" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b100 & D5 {
    	_stub();
    }
    :alu_X5_pair"+=lsr("S5",#"imm_8_13")" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b101 & alu_X5_pair {
        #TODO
        alu_X5_pair = alu_X5_pair + sext(S5 >> imm_8_13);
    }
    :"rxx+=asl(rss,u6)" is imm_22_27=0b001000 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b110 & D5 {
    	_stub();
    }

    :"rx-=asr(rs,u5)" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
    	_stub();
    }
    :"rx-=lsr(rs,u5)" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"rx-=asl(rs,u5)" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
    :"rx+=asr(rs,u5)" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b100 & D5 {
    	_stub();
    }
    :alu_X5"+=lsr("S5",#"imm_8_12")" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b101 & alu_X5 {
        alu_X5 = alu_X5 + (S5 >> imm_8_12);
    }
    :"rx+=asl(rs,u5)" is imm_22_27=0b111000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b110 & D5 {
    	_stub();
    }
}


with slot: iclass=0b1101 {
    :"rx+=add(u8,asl(rx, u5))" is imm_24_27=0b1110 & imm_21_23 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=0 & imm_3 & imm_1_2=0b10 & imm_0=0 {
    	_stub();
    }
    :"rx+=sub(u8,asl(rx, u5))" is imm_24_27=0b1110 & imm_21_23 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=0 & imm_3 & imm_1_2=0b11 & imm_0=0 {
    	_stub();
    }
    :"rx+=add(u8,lsr(rx, u5))" is imm_24_27=0b1110 & imm_21_23 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=1 & imm_3 & imm_1_2=0b10 & imm_0=0 {
    	_stub();
    }
    :"rx+=sub(u8,lsr(rx, u5))" is imm_24_27=0b1110 & imm_21_23 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=1 & imm_3 & imm_1_2=0b11 & imm_0=0 {
    	_stub();
    }
}

#XTYPE/SHIFT:Shift by imm and add
with slot: iclass=0b1100 {
    :D5"=addasl("T5","S5"<<#"imm_5_7")" is imm_21_27=0b0100000 & S5 & imm_13=0 & T5 & imm_5_7 & D5 {
        D5 = T5 + (S5 << imm_5_7);
    }
}

#XTYPE/SHIFT:Shift by imm and logical
with slot: iclass=0b1000 {
    :"rxx&=asr(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b000 & D5 {
    	_stub();
    }
    :"rxx&=lsr(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"rxx&=asl(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b010 & D5 {
    	_stub();
    }
    :"rxx&=rol(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b011 & D5 {
    	_stub();
    }

    :"rxx|=asr(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b100 & D5 {
    	_stub();
    }
    :"rxx|=lsr(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b101 & D5 {
    	_stub();
    }
    :"rxx|=asl(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b110 & D5 {
    	_stub();
    }
    :"rxx|=rol(rss,u6)" is imm_22_27=0b001001 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b111 & D5 {
    	_stub();
    }
    :"rxx^=lsr(rss,u6)" is imm_22_27=0b001010 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"rxx^=asl(rss,u6)" is imm_22_27=0b001010 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b010 & D5 {
    	_stub();
    }
    :"rxx^=rol(rss,u6)" is imm_22_27=0b001010 & imm_21=0 & S5 & imm_8_13 & imm_5_7=0b011 & D5 {
    	_stub();
    }

    :"rx&=asr(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
    	_stub();
    }
    :"rx&=lsr(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"rx&=asl(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
    :"rx&=rol(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b011 & D5 {
    	_stub();
    }
    :"rx|=asr(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b100 & D5 {
    	_stub();
    }
    :"rx|=lsr(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b101 & D5 {
    	_stub();
    }
    :"rx|=asl(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b110 & D5 {
    	_stub();
    }
    :"rx|=rol(rs,u5)" is imm_22_27=0b111001 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b111 & D5 {
    	_stub();
    }

    :"rx^=lsr(rs,u5)" is imm_22_27=0b111010 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"rx^=asl(rs,u5)" is imm_22_27=0b111010 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
    :"rx^=rol(rs,u5)" is imm_22_27=0b111010 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b011 & D5 {
    	_stub();
    }
}
with slot: iclass=0b1101 {
    :"rx+=and(u8,asl(rx, u5))" is imm_24_27=0b1110 & imm_21_23 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=0 & imm_3 & imm_1_2=0b00 & imm_0=0 {
    	_stub();
    }
    :"alu_X5=or(#"u8",asl("alu_X5", #"imm_8_12"))" is imm_24_27=0b1110 & imm_21_23 & alu_X5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=0 & imm_3 & imm_1_2=0b01 & imm_0=0 [ u8 = imm_3 | (imm_5_7 << 1) | (imm_13 << 4) | (imm_21_23 << 5); ] {
	    alu_X5 = u8 | (alu_X5 << imm_8_12);
	}
    :"rx+=and(u8,lsr(rx, u5))" is imm_24_27=0b1110 & imm_21_23 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=1 & imm_3 & imm_1_2=0b00 & imm_0=0 {
    	_stub();
    }
    :"rx+=or(u8,lsr(rx, u5))" is imm_24_27=0b1110 & imm_21_23 & S5 & imm_13 & imm_8_12 & imm_5_7 & imm_4=1 & imm_3 & imm_1_2=0b01 & imm_0=0 {
    	_stub();
    }
}

# Shift r by imm with round
with slot: iclass=0b1000 {
    :"rdd=asr(rss,u6):rnd" is imm_21_27=0b0000110 & S5 & imm_8_13 & imm_5_7=0b111 & D5 {
    	_stub();
    }
    :"rd=asr(rs,u5):rnd" is imm_21_27=0b1100010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
    	_stub();
    }
}

# Shift r by imm with sat
with slot: iclass=0b1000 {
    :"rd=asl(rs,u5):sat" is imm_21_27=0b1100010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Shift by reg
with slot: iclass=0b1100 {
    :"rxx=asr(rss,rt)" is imm_22_27=0b001110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx=lsr(rss,rt)" is imm_22_27=0b001110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx=asl(rss,rt)" is imm_22_27=0b001110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx=lsl(rss,rt)" is imm_22_27=0b001110 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx=asr(rs,rt)" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx=lsr(rs,rt)" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx=asl(rs,rt)" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx=lsl(rs,rt)" is imm_22_27=0b011001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :"rd=lsl(s6,rt)" is imm_22_27=0b011010 & imm_21=0 & imm_16_20 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Shift by reg acc
with slot: iclass=0b1100 {
    :"rxx-=asr(rss,rt)" is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx-=lsr(rss,rt)" is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx-=asl(rss,rt)" is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx-=lsl(rss,rt)" is imm_21_27=0b1011100 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :"rxx+=asr(rss,rt)" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx+=lsr(rss,rt)" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx+=lsr(rss,rt)" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx+=asl(rss,rt)" is imm_21_27=0b1011110 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :"rx-=asr(rs,rt)" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx-=lsr(rs,rt)" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx-=asl(rs,rt)" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx-=lsl(rs,rt)" is imm_22_27=0b110010 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :"rx+=asr(rs,rt)" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx+=lsr(rs,rt)" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx+=asl(rs,rt)" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx+=lsl(rs,rt)" is imm_22_27=0b110011 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Shift by reg log
with slot: iclass=0b1100 {
    :"rxx|=asr(rss,rt)" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx|=lsr(rss,rt)" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx|=asl(rss,rt)" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx|=lsl(rss,rt)" is imm_21_27=0b1011000 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx&=asr(rss,rt)" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx&=lsr(rss,rt)" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx&=asl(rss,rt)" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx&=lsl(rss,rt)" is imm_21_27=0b1011010 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :"rxx^=asr(rss,rt)" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx^=lsr(rss,rt)" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx^=asl(rss,rt)" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rxx^=lsl(rss,rt)" is imm_21_27=0b1011011 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :"rx|=asr(rs,rt)" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx|=lsr(rs,rt)" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx|=asl(rs,rt)" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx|=lsl(rs,rt)" is imm_22_27=0b110000 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }

    :"rx&=asr(rs,rt)" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx&=lsr(rs,rt)" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b01 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx&=asl(rs,rt)" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
    :"rx&=asl(rs,rt)" is imm_22_27=0b110001 & imm_21=0 & S5 & imm_13=0 & T5 & imm_6_7=0b11 & imm_5=0 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Shift by reg sat
with slot: iclass=0b1100 {
    :"shrregsat" is imm_22_27=0b011000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b00 & imm_5=0 & D5 {
    	_stub();
    }
    :"aslsat" is imm_22_27=0b011000 & imm_21=0 & S5 & imm_13=0 & imm_8_12 & imm_6_7=0b10 & imm_5=0 & D5 {
    	_stub();
    }
}

# XTYPE/SHIFT:Vec shift hw imm
# XTYPE/SHIFT:Vec ath shift hw imm
# XTYPE/SHIFT:Vec ath shift hw imm2
# XTYPE/SHIFT:Vec shift hw reg

# XTYPE/SHIFT:Vec shift hw imm
with slot: iclass=0b1000 {
    :"vasrw" is imm_21_27=0b0000010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b000 & D5 {
    	_stub();
    }
    :"vlsrw" is imm_21_27=0b0000010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b001 & D5 {
    	_stub();
    }
    :"vaslw" is imm_21_27=0b0000010 & S5 & imm_13=0 & imm_8_12 & imm_5_7=0b010 & D5 {
    	_stub();
    }
}


# XTYPE/SHIFT:Vec shift hw reg
# XTYPE/SHIFT:Vec shift hw tunc

 #Duplex/L1 TODO: are these wrong, they inc 13, but this should end at 12?
L1L:"loadri_io" is immdup0_13=0 & immdup0_9_12 & immdup0_5_8 & immdup0_0_4 {
_stub();
}
L1L:"loadrub_io" is immdup0_13=1 & immdup0_9_12 & immdup0_5_8 & immdup0_0_4 {
_stub();
}

L1R:"loadri_io" is immdup1_13=0 & immdup1_9_12 & immdup1_5_8 & immdup1_0_4 {
_stub();
}
L1R:"loadrub_io" is immdup1_13=1 & immdup1_9_12 & immdup1_5_8 & immdup1_0_4 {
_stub();
}

# Duplex/A
A1L:immdup0_D4"="immdup0_4_9 is immdup0_10_12=0b010 & immdup0_4_9 & immdup0_D4 {
    immdup0_D4 = immdup0_4_9;
}

A1R:immdup1_D4"="immdup1_4_9 is immdup1_10_12=0b010 & immdup1_4_9 & immdup1_D4 {
    immdup1_D4 = immdup1_4_9;
}

duplex:L1L" duplex_0x0 "L1R is imm_29_31=0b000 & imm_13=0  & L1L & L1R  {
	build L1L;
	build L1R;
}
duplex:"duplex_0x1" is imm_29_31=0b000 & imm_13=1 {
_stub();
}
duplex:"duplex_0x2" is imm_29_31=0b001 & imm_13=0 {
_stub();
}
duplex:"{{"A1L", "A1R"}}" is imm_29_31=0b001 & imm_13=1 & A1L & A1R {
	build A1L;
	build A1R;
}
duplex:"{{dup3}}" is imm_29_31=0b001 & imm_13=1 & immdup1_10_12 & immdup1_4_9 & immdup1_D4 & immdup0_10_12 & immdup0_4_9 & immdup0_D4{
	#build A1L;
	#build A1R;
}
duplex:"duplex_0x4" is imm_29_31=0b010 & imm_13=0 {
_stub();
}
duplex:"duplex_0x5" is imm_29_31=0b010 & imm_13=1 {
_stub();
}
duplex:"duplex_0x6" is imm_29_31=0b011 & imm_13=0 {
_stub();
}
duplex:"duplex_0x7" is imm_29_31=0b011 & imm_13=1 {
_stub();
}
duplex:"duplex_0x8" is imm_29_31=0b100 & imm_13=0 {
_stub();
}
duplex:"duplex_0x9" is imm_29_31=0b100 & imm_13=1 {
_stub();
}
duplex:"duplex_0xa" is imm_29_31=0b101 & imm_13=0 {
_stub();
}
duplex:"duplex_0xb" is imm_29_31=0b101 & imm_13=1 {
_stub();
}
duplex:"duplex_0xc" is imm_29_31=0b110 & imm_13=0 {
_stub();
}
duplex:"duplex_0xd" is imm_29_31=0b110 & imm_13=1 {
_stub();
}
duplex:"duplex_0xe" is imm_29_31=0b111 & imm_13=0 {
_stub();
}
duplex:"duplex_0xf" is imm_29_31=0b111 & imm_13=1 {
_stub();
}

macro prelude() {
    branch_tgt = 0;
    call_tgt = 0;

    P0.new =P0;
    P1.new =P1;
    P2.new =P2;
    P3.new =P3;

}
macro prolude() {
    P0 =P0.new;
    P1 =P1.new;
    P2 =P2.new;
    P3 =P3.new;

    if(branch_tgt == 0) goto <skipj>;
    goto [branch_tgt];
    <skipj>

    if(call_tgt == 0) goto <skipc>;
    call [call_tgt];
    <skipc>
}

# hacky fallback, bad
#define pcodeop _fail;
#slot:"CANT_DISAS_YET" is imm32 {
#_fail();
#}

slot0: slot is slot &  (parse=0b01 | parse=0b10) & iclass!=0b0000{ build slot; }
slot1: slot0 is slot0 {  build slot0; }
slot2: slot0 is slot0 { build slot0; }
slotX: slot is slot & parse=0b11  { build slot; prolude(); }
slotX: duplex is duplex & parse=0b00  { build duplex; prolude();}

:{ slot0 slotX } is slot0;slotX {
    prelude();
	build slot0;
	build slotX;
}
:{ slot0 slot1 slotX } is slot0;slot1;slotX {
    prelude();
	build slot0;
	build slot1;
	build slotX;
}
:{ slot0 slot1 slot2 slotX } is slot0;slot1;slot2;slotX {
    prelude();
	build slot0;
	build slot1;
	build slot2;
	build slotX;
}

:{ slotX } is slotX {
    prelude();
	build slotX;
} 

wslot0:wslot is wslot & iclassw=0b0000 & (parsew=0b01 | parsew=0b10) & (parse64=0b10 | parse64=0b01) { build wslot; }
wslotX: wslot is wslot & iclassw=0b0000 & (parsew=0b01 | parsew=0b10) & (parse64=0b11 | parse64=0b00) { build wslot; prolude(); }
#wslotX: "cursed-ext-duplex" is wslot & iclassw=0b0000 & (parsew=0b01 | parsew=0b10) & parse64=0b00 {
#_stub();
##TODO: man-made horrors beyond comprehension: you can have an extended duplex
##TODO: also wrong, breaks some normal duplexes
##build wslot; prolude();
#}

:{ wslotX } is wslotX {
    prelude();
	build wslotX;
} 

:{ wslot0 wslotX } is wslot0; wslotX {
    prelude();
	build wslot0;
	build wslotX;
} 

:{ wslot0 slot0 slotX } is wslot0; slot0; slotX {
    prelude();
	build wslot0;
	build slot0;
	build slotX;
} 

:{ wslot0 slotX } is wslot0; slotX {
    prelude();
	build wslot0;
	build slotX;
} 
:{ slot0 wslotX } is slot0; wslotX {
    prelude();
	build slot0;
	build wslotX;
}
:{ slot0 slot1 wslotX } is slot0; slot1; wslotX {
    prelude();
	build slot0;
	build slot1;
	build wslotX;
}
:{ slot0 wslot0 slotX } is slot0; wslot0; slotX {
    prelude();
	build slot0;
	build wslot0;
	build slotX;
}


#define register offset=0x00 size=1 [ Rd ];

#define register offset=0x00 size=2 [ AF  BC  DE  HL ];
#define register offset=0x20 size=1 [ A_ F_ B_ C_ D_ E_ H_ L_ ]; # Alternate registers
#define register offset=0x20 size=2 [ AF_   BC_   DE_   HL_ ]; # Alternate registers

#define register offset=0x40 size=2 [ _  PC SP IX IY ];

#define register offset=0x50 size=1 [ rCBAR rCBR rBBR ];

# Define context bits (if defined, size must be multiple of 4-bytes)
#define register offset=0xf0 size=4   contextreg;

#define context contextreg
  #assume8bitIOSpace		= (0,0)
#;

# Flag bits (?? manual is very confusing - could be typos!)
#@define C_flag "F[0,1]"		# C: Carry
#@define N_flag "F[1,1]"		# N: Add/Subtract
#@define PV_flag "F[2,1]"	# PV: Parity/Overflow
#@define H_flag "F[4,1]"		# H: Half Carry
#@define Z_flag "F[6,1]"		# Z: Zero
#@define S_flag "F[7,1]"		# S: Sign

# Include contents of skel.sinc file
#@include "skel.sinc"
