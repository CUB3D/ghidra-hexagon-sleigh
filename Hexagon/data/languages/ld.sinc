

LD_COND_u6: val is imm_8u & imm_16_20u & (hasext0=0 | immext0used=1) [val = imm_8u | (imm_16_20u << 1);] {export *[const]:4 val;}
LD_COND_u6: val is imm_8u & imm_16_20u & hasext0=1 & immext0used=0 & immext0 [val = immext0 | imm_8u | (imm_16_20u << 1);] {export *[const]:4 val;}
LD_COND_u6: val is imm_8u & imm_16_20u & hasext0=1 & immext0used=1 & hasext1=1 & immext1 [val = immext1 | imm_8u | (imm_16_20u << 1);] {export *[const]:4 val;}


LD_U6_SL: u6 is imm_5_6u & imm_8_11u & (hasext0=0 | immext0used=1) [u6 = imm_5_6u | (imm_8_11u << 2);] { export *[const] u6;}
LD_U6_SL: u6 is imm_5_6u & imm_8_11u & hasext0=1 & immext0used=0 & immext0 [u6 = immext0 | imm_5_6u | (imm_8_11u << 2); immext0used=1; immext0everused=1;] { export *[const] u6;}
LD_U6_SL: u6 is imm_5_6u & imm_8_11u & hasext0=1 & immext0used=1 & hasext1=1 & immext1 [u6 = immext1 | imm_5_6u | (imm_8_11u << 2); immext1used=1;] { export *[const] u6;}

@include "ld_dword.sinc"
@include "ld_byte.sinc"
@include "ld_halfword.sinc"


#LD:memory copy
define pcodeop pmemcpy;
with slot: iclass=0b1001 & mode=0 {
    :D5_pair "=pmemcpy(" T5 "," S5_pair ")" is imm_21_27=0b1001111 & S5_pair & imm_13=0 & T5 & imm_5_7=0b000 & D5_pair {
    	D5_pair = pmemcpy(T5, S5_pair);
    }
}

#LD:piecemeal memory copy
define pcodeop movlen;
define pcodeop linecpy;
with slot: iclass=0b0110 & mode=0 {
    :D5 "=movlen(" T5 "," S5_pair ")" is imm_21_27=0b1111111 & S5_pair & imm_13=0 & T5 & imm_5_7=0b010 & D5 {
    	D5 = movlen(T5, S5_pair);
    }
}
with slot: iclass=0b1001 & mode=0 {
    :D5_pair "=linecpy(" T5 "," S5_pair ")" is imm_21_27=0b1001111 & S5_pair & imm_13=0 & T5 & imm_5_7=0b001 & D5_pair {
    	D5_pair = linecpy(T5, S5_pair);
    }
    # pmemcpy: see memory copy
}

@include "ld_unsigned_byte.sinc"
@include "ld_uhalfword.sinc"
@include "ld_word.sinc"


#LD:Dealloc
with slot: iclass=0b1001 & mode=0 {
    :D5_pair"=deallocframe("S5"):raw" is imm_21_27=0b0000000 & S5 & imm_13=0 & imm_5_12=0 & D5_pair & imm_0=0 {
        local EA:4 = S5;
        local tmp:8 = *[ram]:8 EA;
        D5_pair = tmp;
        SP=EA+8;
    }
}

#LD:Dealloc return
with slot: iclass=0b1001 {
    :D5_pair"=dealloc_return("S5"):raw" is imm_21_27=0b0110000 & S5 & imm_10_13=0 & imm_5_9=0 & D5_pair & imm_0=0 & mode=0 {
        local EA:4 = S5;
        local tmp:8 = *[ram]:8 EA;
        D5_pair = tmp;

        SP = EA+8;
    }
    :D5_pair"=dealloc_return("S5"):raw" is imm_21_27=0b0110000 & S5 & imm_10_13=0 & imm_5_9=0 & D5_pair & imm_0=0 & mode=1100 {
        local EA:4 = S5;
        local tmp:8 = *[ram]:8 EA;
        
        local tmp2:8 = tmp>>32;
        local tmp3:4 = tmp2:4;
        
        return [tmp3];
    }
}

#LD:Ld and unpack by to hw TODO
with slot: iclass=0b1001 & mode=0 {
	:"ldunpck00" is imm_27=0 & imm_25_26 & imm_21_24=0b0001 & S5 & imm_5_13 & D5 {
		_stub();
	}
	:"ldunpck01" is imm_27=0 & imm_25_26 & imm_21_24=0b0011 & S5 & imm_5_13 & D5 {
		_stub();
	}
	:"ldunpck02" is imm_27=0 & imm_25_26 & imm_21_24=0b0101 & S5 & imm_5_13 & D5 {
		_stub();
	}
	:"ldunpck03" is imm_27=0 & imm_25_26 & imm_21_24=0b0111 & S5 & imm_5_13 & D5 {
		_stub();
	}
	
	
	:"ldunpck04" is imm_21_27=0b1000001 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=0 & imm_5_8 & D5 {
		_stub();
	}
	:"ldunpck05" is imm_21_27=0b1000001 & S5 & imm_13 & imm_12=0 & imm_10_11=0 & imm_9=1 & imm_8=0 & imm_7=0 & imm_5_6=0 & D5 {
		_stub();
	}
}